// Code generated by mockery. DO NOT EDIT.

//go:build test
// +build test

package mocks

import (
	context "context"

	client "go.woodpecker-ci.org/woodpecker/v2/woodpecker-go/client"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// DeleteAgentsAgentId provides a mock function with given fields: ctx, agentId, params, reqEditors
func (_m *MockClientInterface) DeleteAgentsAgentId(ctx context.Context, agentId int, params *client.DeleteAgentsAgentIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, agentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgentsAgentId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, agentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteAgentsAgentIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, agentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.DeleteAgentsAgentIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, agentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteAgentsAgentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAgentsAgentId'
type MockClientInterface_DeleteAgentsAgentId_Call struct {
	*mock.Call
}

// DeleteAgentsAgentId is a helper method to define mock.On call
//   - ctx context.Context
//   - agentId int
//   - params *client.DeleteAgentsAgentIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteAgentsAgentId(ctx interface{}, agentId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteAgentsAgentId_Call {
	return &MockClientInterface_DeleteAgentsAgentId_Call{Call: _e.mock.On("DeleteAgentsAgentId",
		append([]interface{}{ctx, agentId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteAgentsAgentId_Call) Run(run func(ctx context.Context, agentId int, params *client.DeleteAgentsAgentIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteAgentsAgentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.DeleteAgentsAgentIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteAgentsAgentId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteAgentsAgentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteAgentsAgentId_Call) RunAndReturn(run func(context.Context, int, *client.DeleteAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteAgentsAgentId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteForgesForgeId provides a mock function with given fields: ctx, forgeId, params, reqEditors
func (_m *MockClientInterface) DeleteForgesForgeId(ctx context.Context, forgeId int, params *client.DeleteForgesForgeIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, forgeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteForgesForgeId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteForgesForgeIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, forgeId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteForgesForgeIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, forgeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.DeleteForgesForgeIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, forgeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteForgesForgeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteForgesForgeId'
type MockClientInterface_DeleteForgesForgeId_Call struct {
	*mock.Call
}

// DeleteForgesForgeId is a helper method to define mock.On call
//   - ctx context.Context
//   - forgeId int
//   - params *client.DeleteForgesForgeIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteForgesForgeId(ctx interface{}, forgeId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteForgesForgeId_Call {
	return &MockClientInterface_DeleteForgesForgeId_Call{Call: _e.mock.On("DeleteForgesForgeId",
		append([]interface{}{ctx, forgeId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteForgesForgeId_Call) Run(run func(ctx context.Context, forgeId int, params *client.DeleteForgesForgeIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteForgesForgeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.DeleteForgesForgeIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteForgesForgeId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteForgesForgeId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteForgesForgeId_Call) RunAndReturn(run func(context.Context, int, *client.DeleteForgesForgeIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteForgesForgeId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgsId provides a mock function with given fields: ctx, id, params, reqEditors
func (_m *MockClientInterface) DeleteOrgsId(ctx context.Context, id string, params *client.DeleteOrgsIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgsId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteOrgsIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, id, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteOrgsIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, id, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.DeleteOrgsIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, id, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteOrgsId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsId'
type MockClientInterface_DeleteOrgsId_Call struct {
	*mock.Call
}

// DeleteOrgsId is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - params *client.DeleteOrgsIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteOrgsId(ctx interface{}, id interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteOrgsId_Call {
	return &MockClientInterface_DeleteOrgsId_Call{Call: _e.mock.On("DeleteOrgsId",
		append([]interface{}{ctx, id, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteOrgsId_Call) Run(run func(ctx context.Context, id string, params *client.DeleteOrgsIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteOrgsId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.DeleteOrgsIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteOrgsId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteOrgsId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteOrgsId_Call) RunAndReturn(run func(context.Context, string, *client.DeleteOrgsIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteOrgsId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgsOrgIdAgentsAgentId provides a mock function with given fields: ctx, orgId, agentId, params, reqEditors
func (_m *MockClientInterface) DeleteOrgsOrgIdAgentsAgentId(ctx context.Context, orgId int, agentId int, params *client.DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, agentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgsOrgIdAgentsAgentId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteOrgsOrgIdAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, agentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteOrgsOrgIdAgentsAgentIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, agentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.DeleteOrgsOrgIdAgentsAgentIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, agentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsOrgIdAgentsAgentId'
type MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call struct {
	*mock.Call
}

// DeleteOrgsOrgIdAgentsAgentId is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId int
//   - agentId int
//   - params *client.DeleteOrgsOrgIdAgentsAgentIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteOrgsOrgIdAgentsAgentId(ctx interface{}, orgId interface{}, agentId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call {
	return &MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call{Call: _e.mock.On("DeleteOrgsOrgIdAgentsAgentId",
		append([]interface{}{ctx, orgId, agentId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call) Run(run func(ctx context.Context, orgId int, agentId int, params *client.DeleteOrgsOrgIdAgentsAgentIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.DeleteOrgsOrgIdAgentsAgentIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call) RunAndReturn(run func(context.Context, int, int, *client.DeleteOrgsOrgIdAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteOrgsOrgIdAgentsAgentId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgsOrgIdRegistriesRegistry provides a mock function with given fields: ctx, orgId, registry, params, reqEditors
func (_m *MockClientInterface) DeleteOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *client.DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgsOrgIdRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.DeleteOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.DeleteOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.DeleteOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsOrgIdRegistriesRegistry'
type MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call struct {
	*mock.Call
}

// DeleteOrgsOrgIdRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - registry string
//   - params *client.DeleteOrgsOrgIdRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteOrgsOrgIdRegistriesRegistry(ctx interface{}, orgId interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call {
	return &MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call{Call: _e.mock.On("DeleteOrgsOrgIdRegistriesRegistry",
		append([]interface{}{ctx, orgId, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call) Run(run func(ctx context.Context, orgId string, registry string, params *client.DeleteOrgsOrgIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.DeleteOrgsOrgIdRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call) RunAndReturn(run func(context.Context, string, string, *client.DeleteOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrgsOrgIdSecretsSecret provides a mock function with given fields: ctx, orgId, secret, params, reqEditors
func (_m *MockClientInterface) DeleteOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *client.DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, secret, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgsOrgIdSecretsSecret")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.DeleteOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, secret, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.DeleteOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, secret, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.DeleteOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, secret, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrgsOrgIdSecretsSecret'
type MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call struct {
	*mock.Call
}

// DeleteOrgsOrgIdSecretsSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - secret string
//   - params *client.DeleteOrgsOrgIdSecretsSecretParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteOrgsOrgIdSecretsSecret(ctx interface{}, orgId interface{}, secret interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call {
	return &MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call{Call: _e.mock.On("DeleteOrgsOrgIdSecretsSecret",
		append([]interface{}{ctx, orgId, secret, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call) Run(run func(ctx context.Context, orgId string, secret string, params *client.DeleteOrgsOrgIdSecretsSecretParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.DeleteOrgsOrgIdSecretsSecretParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call) RunAndReturn(run func(context.Context, string, string, *client.DeleteOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteOrgsOrgIdSecretsSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRegistriesRegistry provides a mock function with given fields: ctx, registry, params, reqEditors
func (_m *MockClientInterface) DeleteRegistriesRegistry(ctx context.Context, registry string, params *client.DeleteRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.DeleteRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRegistriesRegistry'
type MockClientInterface_DeleteRegistriesRegistry_Call struct {
	*mock.Call
}

// DeleteRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - registry string
//   - params *client.DeleteRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteRegistriesRegistry(ctx interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteRegistriesRegistry_Call {
	return &MockClientInterface_DeleteRegistriesRegistry_Call{Call: _e.mock.On("DeleteRegistriesRegistry",
		append([]interface{}{ctx, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteRegistriesRegistry_Call) Run(run func(ctx context.Context, registry string, params *client.DeleteRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.DeleteRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteRegistriesRegistry_Call) RunAndReturn(run func(context.Context, string, *client.DeleteRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoId provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoId(ctx context.Context, repoId int, params *client.DeleteReposRepoIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteReposRepoIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.DeleteReposRepoIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.DeleteReposRepoIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoId'
type MockClientInterface_DeleteReposRepoId_Call struct {
	*mock.Call
}

// DeleteReposRepoId is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.DeleteReposRepoIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoId(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoId_Call {
	return &MockClientInterface_DeleteReposRepoId_Call{Call: _e.mock.On("DeleteReposRepoId",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoId_Call) Run(run func(ctx context.Context, repoId int, params *client.DeleteReposRepoIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.DeleteReposRepoIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoId_Call) RunAndReturn(run func(context.Context, int, *client.DeleteReposRepoIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdCronCron provides a mock function with given fields: ctx, repoId, cron, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *client.DeleteReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, cron, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdCronCron")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, cron, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdCronCronParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.DeleteReposRepoIdCronCronParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdCronCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdCronCron'
type MockClientInterface_DeleteReposRepoIdCronCron_Call struct {
	*mock.Call
}

// DeleteReposRepoIdCronCron is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - cron string
//   - params *client.DeleteReposRepoIdCronCronParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdCronCron(ctx interface{}, repoId interface{}, cron interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdCronCron_Call {
	return &MockClientInterface_DeleteReposRepoIdCronCron_Call{Call: _e.mock.On("DeleteReposRepoIdCronCron",
		append([]interface{}{ctx, repoId, cron, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdCronCron_Call) Run(run func(ctx context.Context, repoId int, cron string, params *client.DeleteReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdCronCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.DeleteReposRepoIdCronCronParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdCronCron_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdCronCron_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdCronCron_Call) RunAndReturn(run func(context.Context, int, string, *client.DeleteReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdCronCron_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdLogsNumber provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdLogsNumber(ctx context.Context, repoId int, number int, params *client.DeleteReposRepoIdLogsNumberParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdLogsNumber")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteReposRepoIdLogsNumberParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteReposRepoIdLogsNumberParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.DeleteReposRepoIdLogsNumberParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdLogsNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdLogsNumber'
type MockClientInterface_DeleteReposRepoIdLogsNumber_Call struct {
	*mock.Call
}

// DeleteReposRepoIdLogsNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.DeleteReposRepoIdLogsNumberParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdLogsNumber(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdLogsNumber_Call {
	return &MockClientInterface_DeleteReposRepoIdLogsNumber_Call{Call: _e.mock.On("DeleteReposRepoIdLogsNumber",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumber_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.DeleteReposRepoIdLogsNumberParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdLogsNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.DeleteReposRepoIdLogsNumberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumber_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdLogsNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumber_Call) RunAndReturn(run func(context.Context, int, int, *client.DeleteReposRepoIdLogsNumberParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdLogsNumber_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdLogsNumberStepId provides a mock function with given fields: ctx, repoId, number, stepId, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdLogsNumberStepId(ctx context.Context, repoId int, number int, stepId int, params *client.DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, stepId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdLogsNumberStepId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *client.DeleteReposRepoIdLogsNumberStepIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, stepId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *client.DeleteReposRepoIdLogsNumberStepIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, stepId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *client.DeleteReposRepoIdLogsNumberStepIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, stepId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdLogsNumberStepId'
type MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call struct {
	*mock.Call
}

// DeleteReposRepoIdLogsNumberStepId is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - stepId int
//   - params *client.DeleteReposRepoIdLogsNumberStepIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdLogsNumberStepId(ctx interface{}, repoId interface{}, number interface{}, stepId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call {
	return &MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call{Call: _e.mock.On("DeleteReposRepoIdLogsNumberStepId",
		append([]interface{}{ctx, repoId, number, stepId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call) Run(run func(ctx context.Context, repoId int, number int, stepId int, params *client.DeleteReposRepoIdLogsNumberStepIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int), args[4].(*client.DeleteReposRepoIdLogsNumberStepIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call) RunAndReturn(run func(context.Context, int, int, int, *client.DeleteReposRepoIdLogsNumberStepIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdLogsNumberStepId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdPipelinesNumber provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *client.DeleteReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdPipelinesNumber")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.DeleteReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.DeleteReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdPipelinesNumber'
type MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call struct {
	*mock.Call
}

// DeleteReposRepoIdPipelinesNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.DeleteReposRepoIdPipelinesNumberParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdPipelinesNumber(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call {
	return &MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call{Call: _e.mock.On("DeleteReposRepoIdPipelinesNumber",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.DeleteReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.DeleteReposRepoIdPipelinesNumberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call) RunAndReturn(run func(context.Context, int, int, *client.DeleteReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdRegistriesRegistry provides a mock function with given fields: ctx, repoId, registry, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *client.DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.DeleteReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdRegistriesRegistry'
type MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call struct {
	*mock.Call
}

// DeleteReposRepoIdRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - registry string
//   - params *client.DeleteReposRepoIdRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdRegistriesRegistry(ctx interface{}, repoId interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call {
	return &MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call{Call: _e.mock.On("DeleteReposRepoIdRegistriesRegistry",
		append([]interface{}{ctx, repoId, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call) Run(run func(ctx context.Context, repoId int, registry string, params *client.DeleteReposRepoIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.DeleteReposRepoIdRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call) RunAndReturn(run func(context.Context, int, string, *client.DeleteReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReposRepoIdSecretsSecretName provides a mock function with given fields: ctx, repoId, secretName, params, reqEditors
func (_m *MockClientInterface) DeleteReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *client.DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, secretName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReposRepoIdSecretsSecretName")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, secretName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.DeleteReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, secretName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.DeleteReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, secretName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReposRepoIdSecretsSecretName'
type MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call struct {
	*mock.Call
}

// DeleteReposRepoIdSecretsSecretName is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - secretName string
//   - params *client.DeleteReposRepoIdSecretsSecretNameParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteReposRepoIdSecretsSecretName(ctx interface{}, repoId interface{}, secretName interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call {
	return &MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call{Call: _e.mock.On("DeleteReposRepoIdSecretsSecretName",
		append([]interface{}{ctx, repoId, secretName, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call) Run(run func(ctx context.Context, repoId int, secretName string, params *client.DeleteReposRepoIdSecretsSecretNameParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.DeleteReposRepoIdSecretsSecretNameParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call) RunAndReturn(run func(context.Context, int, string, *client.DeleteReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteReposRepoIdSecretsSecretName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecretsSecret provides a mock function with given fields: ctx, secret, params, reqEditors
func (_m *MockClientInterface) DeleteSecretsSecret(ctx context.Context, secret string, params *client.DeleteSecretsSecretParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, secret, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecretsSecret")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, secret, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteSecretsSecretParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, secret, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.DeleteSecretsSecretParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, secret, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteSecretsSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecretsSecret'
type MockClientInterface_DeleteSecretsSecret_Call struct {
	*mock.Call
}

// DeleteSecretsSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret string
//   - params *client.DeleteSecretsSecretParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteSecretsSecret(ctx interface{}, secret interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteSecretsSecret_Call {
	return &MockClientInterface_DeleteSecretsSecret_Call{Call: _e.mock.On("DeleteSecretsSecret",
		append([]interface{}{ctx, secret, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteSecretsSecret_Call) Run(run func(ctx context.Context, secret string, params *client.DeleteSecretsSecretParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteSecretsSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.DeleteSecretsSecretParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteSecretsSecret_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteSecretsSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteSecretsSecret_Call) RunAndReturn(run func(context.Context, string, *client.DeleteSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteSecretsSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserToken provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) DeleteUserToken(ctx context.Context, params *client.DeleteUserTokenParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.DeleteUserTokenParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.DeleteUserTokenParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.DeleteUserTokenParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteUserToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserToken'
type MockClientInterface_DeleteUserToken_Call struct {
	*mock.Call
}

// DeleteUserToken is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.DeleteUserTokenParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteUserToken(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteUserToken_Call {
	return &MockClientInterface_DeleteUserToken_Call{Call: _e.mock.On("DeleteUserToken",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteUserToken_Call) Run(run func(ctx context.Context, params *client.DeleteUserTokenParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteUserToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.DeleteUserTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteUserToken_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteUserToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteUserToken_Call) RunAndReturn(run func(context.Context, *client.DeleteUserTokenParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteUserToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUsersLogin provides a mock function with given fields: ctx, login, params, reqEditors
func (_m *MockClientInterface) DeleteUsersLogin(ctx context.Context, login string, params *client.DeleteUsersLoginParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, login, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsersLogin")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteUsersLoginParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, login, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.DeleteUsersLoginParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, login, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.DeleteUsersLoginParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, login, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteUsersLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUsersLogin'
type MockClientInterface_DeleteUsersLogin_Call struct {
	*mock.Call
}

// DeleteUsersLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - params *client.DeleteUsersLoginParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteUsersLogin(ctx interface{}, login interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteUsersLogin_Call {
	return &MockClientInterface_DeleteUsersLogin_Call{Call: _e.mock.On("DeleteUsersLogin",
		append([]interface{}{ctx, login, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteUsersLogin_Call) Run(run func(ctx context.Context, login string, params *client.DeleteUsersLoginParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_DeleteUsersLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.DeleteUsersLoginParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteUsersLogin_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteUsersLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteUsersLogin_Call) RunAndReturn(run func(context.Context, string, *client.DeleteUsersLoginParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteUsersLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgents provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetAgents(ctx context.Context, params *client.GetAgentsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgents")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetAgentsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetAgentsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetAgentsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetAgents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgents'
type MockClientInterface_GetAgents_Call struct {
	*mock.Call
}

// GetAgents is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetAgentsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetAgents(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetAgents_Call {
	return &MockClientInterface_GetAgents_Call{Call: _e.mock.On("GetAgents",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetAgents_Call) Run(run func(ctx context.Context, params *client.GetAgentsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetAgents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetAgentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetAgents_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetAgents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetAgents_Call) RunAndReturn(run func(context.Context, *client.GetAgentsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetAgents_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentsAgentId provides a mock function with given fields: ctx, agentId, params, reqEditors
func (_m *MockClientInterface) GetAgentsAgentId(ctx context.Context, agentId int, params *client.GetAgentsAgentIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, agentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentsAgentId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, agentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetAgentsAgentIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, agentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetAgentsAgentIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, agentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetAgentsAgentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentsAgentId'
type MockClientInterface_GetAgentsAgentId_Call struct {
	*mock.Call
}

// GetAgentsAgentId is a helper method to define mock.On call
//   - ctx context.Context
//   - agentId int
//   - params *client.GetAgentsAgentIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetAgentsAgentId(ctx interface{}, agentId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetAgentsAgentId_Call {
	return &MockClientInterface_GetAgentsAgentId_Call{Call: _e.mock.On("GetAgentsAgentId",
		append([]interface{}{ctx, agentId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetAgentsAgentId_Call) Run(run func(ctx context.Context, agentId int, params *client.GetAgentsAgentIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetAgentsAgentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetAgentsAgentIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetAgentsAgentId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetAgentsAgentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetAgentsAgentId_Call) RunAndReturn(run func(context.Context, int, *client.GetAgentsAgentIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetAgentsAgentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentsAgentIdTasks provides a mock function with given fields: ctx, agentId, params, reqEditors
func (_m *MockClientInterface) GetAgentsAgentIdTasks(ctx context.Context, agentId int, params *client.GetAgentsAgentIdTasksParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, agentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentsAgentIdTasks")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetAgentsAgentIdTasksParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, agentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetAgentsAgentIdTasksParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, agentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetAgentsAgentIdTasksParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, agentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetAgentsAgentIdTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentsAgentIdTasks'
type MockClientInterface_GetAgentsAgentIdTasks_Call struct {
	*mock.Call
}

// GetAgentsAgentIdTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - agentId int
//   - params *client.GetAgentsAgentIdTasksParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetAgentsAgentIdTasks(ctx interface{}, agentId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetAgentsAgentIdTasks_Call {
	return &MockClientInterface_GetAgentsAgentIdTasks_Call{Call: _e.mock.On("GetAgentsAgentIdTasks",
		append([]interface{}{ctx, agentId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetAgentsAgentIdTasks_Call) Run(run func(ctx context.Context, agentId int, params *client.GetAgentsAgentIdTasksParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetAgentsAgentIdTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetAgentsAgentIdTasksParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetAgentsAgentIdTasks_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetAgentsAgentIdTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetAgentsAgentIdTasks_Call) RunAndReturn(run func(context.Context, int, *client.GetAgentsAgentIdTasksParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetAgentsAgentIdTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBadgesRepoIdCcXml provides a mock function with given fields: ctx, repoId, reqEditors
func (_m *MockClientInterface) GetBadgesRepoIdCcXml(ctx context.Context, repoId int, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBadgesRepoIdCcXml")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetBadgesRepoIdCcXml_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBadgesRepoIdCcXml'
type MockClientInterface_GetBadgesRepoIdCcXml_Call struct {
	*mock.Call
}

// GetBadgesRepoIdCcXml is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetBadgesRepoIdCcXml(ctx interface{}, repoId interface{}, reqEditors ...interface{}) *MockClientInterface_GetBadgesRepoIdCcXml_Call {
	return &MockClientInterface_GetBadgesRepoIdCcXml_Call{Call: _e.mock.On("GetBadgesRepoIdCcXml",
		append([]interface{}{ctx, repoId}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetBadgesRepoIdCcXml_Call) Run(run func(ctx context.Context, repoId int, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetBadgesRepoIdCcXml_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetBadgesRepoIdCcXml_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetBadgesRepoIdCcXml_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetBadgesRepoIdCcXml_Call) RunAndReturn(run func(context.Context, int, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetBadgesRepoIdCcXml_Call {
	_c.Call.Return(run)
	return _c
}

// GetBadgesRepoIdStatusSvg provides a mock function with given fields: ctx, repoId, reqEditors
func (_m *MockClientInterface) GetBadgesRepoIdStatusSvg(ctx context.Context, repoId int, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBadgesRepoIdStatusSvg")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetBadgesRepoIdStatusSvg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBadgesRepoIdStatusSvg'
type MockClientInterface_GetBadgesRepoIdStatusSvg_Call struct {
	*mock.Call
}

// GetBadgesRepoIdStatusSvg is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetBadgesRepoIdStatusSvg(ctx interface{}, repoId interface{}, reqEditors ...interface{}) *MockClientInterface_GetBadgesRepoIdStatusSvg_Call {
	return &MockClientInterface_GetBadgesRepoIdStatusSvg_Call{Call: _e.mock.On("GetBadgesRepoIdStatusSvg",
		append([]interface{}{ctx, repoId}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetBadgesRepoIdStatusSvg_Call) Run(run func(ctx context.Context, repoId int, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetBadgesRepoIdStatusSvg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetBadgesRepoIdStatusSvg_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetBadgesRepoIdStatusSvg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetBadgesRepoIdStatusSvg_Call) RunAndReturn(run func(context.Context, int, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetBadgesRepoIdStatusSvg_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprof provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprof(ctx context.Context, params *client.GetDebugPprofParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprof")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprof'
type MockClientInterface_GetDebugPprof_Call struct {
	*mock.Call
}

// GetDebugPprof is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprof(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprof_Call {
	return &MockClientInterface_GetDebugPprof_Call{Call: _e.mock.On("GetDebugPprof",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprof_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprof_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprof_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprof_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprof_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofBlock provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofBlock(ctx context.Context, params *client.GetDebugPprofBlockParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofBlock")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofBlockParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofBlockParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofBlockParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofBlock'
type MockClientInterface_GetDebugPprofBlock_Call struct {
	*mock.Call
}

// GetDebugPprofBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofBlockParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofBlock(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofBlock_Call {
	return &MockClientInterface_GetDebugPprofBlock_Call{Call: _e.mock.On("GetDebugPprofBlock",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofBlock_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofBlockParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofBlockParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofBlock_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofBlock_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofBlockParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofCmdline provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofCmdline(ctx context.Context, params *client.GetDebugPprofCmdlineParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofCmdline")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofCmdlineParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofCmdlineParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofCmdlineParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofCmdline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofCmdline'
type MockClientInterface_GetDebugPprofCmdline_Call struct {
	*mock.Call
}

// GetDebugPprofCmdline is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofCmdlineParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofCmdline(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofCmdline_Call {
	return &MockClientInterface_GetDebugPprofCmdline_Call{Call: _e.mock.On("GetDebugPprofCmdline",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofCmdline_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofCmdlineParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofCmdline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofCmdlineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofCmdline_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofCmdline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofCmdline_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofCmdlineParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofCmdline_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofGoroutine provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofGoroutine(ctx context.Context, params *client.GetDebugPprofGoroutineParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofGoroutine")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofGoroutineParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofGoroutineParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofGoroutineParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofGoroutine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofGoroutine'
type MockClientInterface_GetDebugPprofGoroutine_Call struct {
	*mock.Call
}

// GetDebugPprofGoroutine is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofGoroutineParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofGoroutine(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofGoroutine_Call {
	return &MockClientInterface_GetDebugPprofGoroutine_Call{Call: _e.mock.On("GetDebugPprofGoroutine",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofGoroutine_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofGoroutineParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofGoroutine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofGoroutineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofGoroutine_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofGoroutine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofGoroutine_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofGoroutineParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofGoroutine_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofHeap provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofHeap(ctx context.Context, params *client.GetDebugPprofHeapParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofHeap")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofHeapParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofHeapParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofHeapParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofHeap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofHeap'
type MockClientInterface_GetDebugPprofHeap_Call struct {
	*mock.Call
}

// GetDebugPprofHeap is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofHeapParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofHeap(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofHeap_Call {
	return &MockClientInterface_GetDebugPprofHeap_Call{Call: _e.mock.On("GetDebugPprofHeap",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofHeap_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofHeapParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofHeap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofHeapParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofHeap_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofHeap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofHeap_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofHeapParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofHeap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofProfile provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofProfile(ctx context.Context, params *client.GetDebugPprofProfileParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofProfile")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofProfileParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofProfileParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofProfileParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofProfile'
type MockClientInterface_GetDebugPprofProfile_Call struct {
	*mock.Call
}

// GetDebugPprofProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofProfileParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofProfile(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofProfile_Call {
	return &MockClientInterface_GetDebugPprofProfile_Call{Call: _e.mock.On("GetDebugPprofProfile",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofProfile_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofProfileParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofProfileParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofProfile_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofProfile_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofProfileParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofSymbol provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofSymbol(ctx context.Context, params *client.GetDebugPprofSymbolParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofSymbol")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofSymbolParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofSymbolParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofSymbolParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofSymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofSymbol'
type MockClientInterface_GetDebugPprofSymbol_Call struct {
	*mock.Call
}

// GetDebugPprofSymbol is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofSymbolParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofSymbol(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofSymbol_Call {
	return &MockClientInterface_GetDebugPprofSymbol_Call{Call: _e.mock.On("GetDebugPprofSymbol",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofSymbol_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofSymbolParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofSymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofSymbolParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofSymbol_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofSymbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofSymbol_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofSymbolParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofSymbol_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofThreadcreate provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofThreadcreate(ctx context.Context, params *client.GetDebugPprofThreadcreateParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofThreadcreate")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofThreadcreateParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofThreadcreateParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofThreadcreateParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofThreadcreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofThreadcreate'
type MockClientInterface_GetDebugPprofThreadcreate_Call struct {
	*mock.Call
}

// GetDebugPprofThreadcreate is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofThreadcreateParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofThreadcreate(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofThreadcreate_Call {
	return &MockClientInterface_GetDebugPprofThreadcreate_Call{Call: _e.mock.On("GetDebugPprofThreadcreate",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofThreadcreate_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofThreadcreateParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofThreadcreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofThreadcreateParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofThreadcreate_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofThreadcreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofThreadcreate_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofThreadcreateParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofThreadcreate_Call {
	_c.Call.Return(run)
	return _c
}

// GetDebugPprofTrace provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetDebugPprofTrace(ctx context.Context, params *client.GetDebugPprofTraceParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDebugPprofTrace")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofTraceParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetDebugPprofTraceParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetDebugPprofTraceParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDebugPprofTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDebugPprofTrace'
type MockClientInterface_GetDebugPprofTrace_Call struct {
	*mock.Call
}

// GetDebugPprofTrace is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetDebugPprofTraceParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetDebugPprofTrace(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetDebugPprofTrace_Call {
	return &MockClientInterface_GetDebugPprofTrace_Call{Call: _e.mock.On("GetDebugPprofTrace",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetDebugPprofTrace_Call) Run(run func(ctx context.Context, params *client.GetDebugPprofTraceParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetDebugPprofTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetDebugPprofTraceParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetDebugPprofTrace_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetDebugPprofTrace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDebugPprofTrace_Call) RunAndReturn(run func(context.Context, *client.GetDebugPprofTraceParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetDebugPprofTrace_Call {
	_c.Call.Return(run)
	return _c
}

// GetForges provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetForges(ctx context.Context, params *client.GetForgesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetForges")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetForgesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetForgesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetForgesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetForges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForges'
type MockClientInterface_GetForges_Call struct {
	*mock.Call
}

// GetForges is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetForgesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetForges(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetForges_Call {
	return &MockClientInterface_GetForges_Call{Call: _e.mock.On("GetForges",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetForges_Call) Run(run func(ctx context.Context, params *client.GetForgesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetForges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetForgesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetForges_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetForges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetForges_Call) RunAndReturn(run func(context.Context, *client.GetForgesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetForges_Call {
	_c.Call.Return(run)
	return _c
}

// GetForgesForgeId provides a mock function with given fields: ctx, forgeId, params, reqEditors
func (_m *MockClientInterface) GetForgesForgeId(ctx context.Context, forgeId int, params *client.GetForgesForgeIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, forgeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetForgesForgeId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetForgesForgeIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, forgeId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetForgesForgeIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, forgeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetForgesForgeIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, forgeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetForgesForgeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForgesForgeId'
type MockClientInterface_GetForgesForgeId_Call struct {
	*mock.Call
}

// GetForgesForgeId is a helper method to define mock.On call
//   - ctx context.Context
//   - forgeId int
//   - params *client.GetForgesForgeIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetForgesForgeId(ctx interface{}, forgeId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetForgesForgeId_Call {
	return &MockClientInterface_GetForgesForgeId_Call{Call: _e.mock.On("GetForgesForgeId",
		append([]interface{}{ctx, forgeId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetForgesForgeId_Call) Run(run func(ctx context.Context, forgeId int, params *client.GetForgesForgeIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetForgesForgeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetForgesForgeIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetForgesForgeId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetForgesForgeId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetForgesForgeId_Call) RunAndReturn(run func(context.Context, int, *client.GetForgesForgeIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetForgesForgeId_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealthz provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientInterface) GetHealthz(ctx context.Context, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthz")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetHealthz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthz'
type MockClientInterface_GetHealthz_Call struct {
	*mock.Call
}

// GetHealthz is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetHealthz(ctx interface{}, reqEditors ...interface{}) *MockClientInterface_GetHealthz_Call {
	return &MockClientInterface_GetHealthz_Call{Call: _e.mock.On("GetHealthz",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetHealthz_Call) Run(run func(ctx context.Context, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetHealthz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetHealthz_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetHealthz_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetHealthz_Call) RunAndReturn(run func(context.Context, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetHealthz_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogLevel provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientInterface) GetLogLevel(ctx context.Context, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLogLevel")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogLevel'
type MockClientInterface_GetLogLevel_Call struct {
	*mock.Call
}

// GetLogLevel is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetLogLevel(ctx interface{}, reqEditors ...interface{}) *MockClientInterface_GetLogLevel_Call {
	return &MockClientInterface_GetLogLevel_Call{Call: _e.mock.On("GetLogLevel",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetLogLevel_Call) Run(run func(ctx context.Context, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetLogLevel_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetLogLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetLogLevel_Call) RunAndReturn(run func(context.Context, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgLookupOrgFullName provides a mock function with given fields: ctx, orgFullName, params, reqEditors
func (_m *MockClientInterface) GetOrgLookupOrgFullName(ctx context.Context, orgFullName string, params *client.GetOrgLookupOrgFullNameParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgFullName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgLookupOrgFullName")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgLookupOrgFullNameParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgFullName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgLookupOrgFullNameParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgFullName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOrgLookupOrgFullNameParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgFullName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgLookupOrgFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgLookupOrgFullName'
type MockClientInterface_GetOrgLookupOrgFullName_Call struct {
	*mock.Call
}

// GetOrgLookupOrgFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - orgFullName string
//   - params *client.GetOrgLookupOrgFullNameParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgLookupOrgFullName(ctx interface{}, orgFullName interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgLookupOrgFullName_Call {
	return &MockClientInterface_GetOrgLookupOrgFullName_Call{Call: _e.mock.On("GetOrgLookupOrgFullName",
		append([]interface{}{ctx, orgFullName, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgLookupOrgFullName_Call) Run(run func(ctx context.Context, orgFullName string, params *client.GetOrgLookupOrgFullNameParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgLookupOrgFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetOrgLookupOrgFullNameParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgLookupOrgFullName_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgLookupOrgFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgLookupOrgFullName_Call) RunAndReturn(run func(context.Context, string, *client.GetOrgLookupOrgFullNameParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgLookupOrgFullName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgs provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetOrgs(ctx context.Context, params *client.GetOrgsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgs")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetOrgsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetOrgsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetOrgsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgs'
type MockClientInterface_GetOrgs_Call struct {
	*mock.Call
}

// GetOrgs is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetOrgsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgs(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgs_Call {
	return &MockClientInterface_GetOrgs_Call{Call: _e.mock.On("GetOrgs",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgs_Call) Run(run func(ctx context.Context, params *client.GetOrgsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetOrgsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgs_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgs_Call) RunAndReturn(run func(context.Context, *client.GetOrgsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgId provides a mock function with given fields: ctx, orgId, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgId(ctx context.Context, orgId string, params *client.GetOrgsOrgIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOrgsOrgIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgId'
type MockClientInterface_GetOrgsOrgId_Call struct {
	*mock.Call
}

// GetOrgsOrgId is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.GetOrgsOrgIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgId(ctx interface{}, orgId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgId_Call {
	return &MockClientInterface_GetOrgsOrgId_Call{Call: _e.mock.On("GetOrgsOrgId",
		append([]interface{}{ctx, orgId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgId_Call) Run(run func(ctx context.Context, orgId string, params *client.GetOrgsOrgIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetOrgsOrgIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgId_Call) RunAndReturn(run func(context.Context, string, *client.GetOrgsOrgIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdAgents provides a mock function with given fields: ctx, orgId, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdAgents(ctx context.Context, orgId int, params *client.GetOrgsOrgIdAgentsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdAgents")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetOrgsOrgIdAgentsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetOrgsOrgIdAgentsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetOrgsOrgIdAgentsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdAgents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdAgents'
type MockClientInterface_GetOrgsOrgIdAgents_Call struct {
	*mock.Call
}

// GetOrgsOrgIdAgents is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId int
//   - params *client.GetOrgsOrgIdAgentsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdAgents(ctx interface{}, orgId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdAgents_Call {
	return &MockClientInterface_GetOrgsOrgIdAgents_Call{Call: _e.mock.On("GetOrgsOrgIdAgents",
		append([]interface{}{ctx, orgId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdAgents_Call) Run(run func(ctx context.Context, orgId int, params *client.GetOrgsOrgIdAgentsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdAgents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetOrgsOrgIdAgentsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdAgents_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdAgents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdAgents_Call) RunAndReturn(run func(context.Context, int, *client.GetOrgsOrgIdAgentsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdAgents_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdPermissions provides a mock function with given fields: ctx, orgId, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdPermissions(ctx context.Context, orgId string, params *client.GetOrgsOrgIdPermissionsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdPermissions")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdPermissionsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdPermissionsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOrgsOrgIdPermissionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdPermissions'
type MockClientInterface_GetOrgsOrgIdPermissions_Call struct {
	*mock.Call
}

// GetOrgsOrgIdPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.GetOrgsOrgIdPermissionsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdPermissions(ctx interface{}, orgId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdPermissions_Call {
	return &MockClientInterface_GetOrgsOrgIdPermissions_Call{Call: _e.mock.On("GetOrgsOrgIdPermissions",
		append([]interface{}{ctx, orgId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdPermissions_Call) Run(run func(ctx context.Context, orgId string, params *client.GetOrgsOrgIdPermissionsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetOrgsOrgIdPermissionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdPermissions_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdPermissions_Call) RunAndReturn(run func(context.Context, string, *client.GetOrgsOrgIdPermissionsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdRegistries provides a mock function with given fields: ctx, orgId, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdRegistries(ctx context.Context, orgId string, params *client.GetOrgsOrgIdRegistriesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdRegistries")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdRegistriesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOrgsOrgIdRegistriesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdRegistries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdRegistries'
type MockClientInterface_GetOrgsOrgIdRegistries_Call struct {
	*mock.Call
}

// GetOrgsOrgIdRegistries is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.GetOrgsOrgIdRegistriesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdRegistries(ctx interface{}, orgId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdRegistries_Call {
	return &MockClientInterface_GetOrgsOrgIdRegistries_Call{Call: _e.mock.On("GetOrgsOrgIdRegistries",
		append([]interface{}{ctx, orgId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistries_Call) Run(run func(ctx context.Context, orgId string, params *client.GetOrgsOrgIdRegistriesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdRegistries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetOrgsOrgIdRegistriesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistries_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdRegistries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistries_Call) RunAndReturn(run func(context.Context, string, *client.GetOrgsOrgIdRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdRegistries_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdRegistriesRegistry provides a mock function with given fields: ctx, orgId, registry, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdRegistriesRegistry(ctx context.Context, orgId string, registry string, params *client.GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.GetOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.GetOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.GetOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdRegistriesRegistry'
type MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call struct {
	*mock.Call
}

// GetOrgsOrgIdRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - registry string
//   - params *client.GetOrgsOrgIdRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdRegistriesRegistry(ctx interface{}, orgId interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call {
	return &MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call{Call: _e.mock.On("GetOrgsOrgIdRegistriesRegistry",
		append([]interface{}{ctx, orgId, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call) Run(run func(ctx context.Context, orgId string, registry string, params *client.GetOrgsOrgIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.GetOrgsOrgIdRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call) RunAndReturn(run func(context.Context, string, string, *client.GetOrgsOrgIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdSecrets provides a mock function with given fields: ctx, orgId, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdSecrets(ctx context.Context, orgId string, params *client.GetOrgsOrgIdSecretsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdSecrets")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdSecretsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetOrgsOrgIdSecretsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetOrgsOrgIdSecretsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdSecrets'
type MockClientInterface_GetOrgsOrgIdSecrets_Call struct {
	*mock.Call
}

// GetOrgsOrgIdSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.GetOrgsOrgIdSecretsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdSecrets(ctx interface{}, orgId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdSecrets_Call {
	return &MockClientInterface_GetOrgsOrgIdSecrets_Call{Call: _e.mock.On("GetOrgsOrgIdSecrets",
		append([]interface{}{ctx, orgId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdSecrets_Call) Run(run func(ctx context.Context, orgId string, params *client.GetOrgsOrgIdSecretsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetOrgsOrgIdSecretsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdSecrets_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdSecrets_Call) RunAndReturn(run func(context.Context, string, *client.GetOrgsOrgIdSecretsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgsOrgIdSecretsSecret provides a mock function with given fields: ctx, orgId, secret, params, reqEditors
func (_m *MockClientInterface) GetOrgsOrgIdSecretsSecret(ctx context.Context, orgId string, secret string, params *client.GetOrgsOrgIdSecretsSecretParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, secret, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgsOrgIdSecretsSecret")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.GetOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, secret, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.GetOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, secret, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.GetOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, secret, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetOrgsOrgIdSecretsSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgsOrgIdSecretsSecret'
type MockClientInterface_GetOrgsOrgIdSecretsSecret_Call struct {
	*mock.Call
}

// GetOrgsOrgIdSecretsSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - secret string
//   - params *client.GetOrgsOrgIdSecretsSecretParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetOrgsOrgIdSecretsSecret(ctx interface{}, orgId interface{}, secret interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call {
	return &MockClientInterface_GetOrgsOrgIdSecretsSecret_Call{Call: _e.mock.On("GetOrgsOrgIdSecretsSecret",
		append([]interface{}{ctx, orgId, secret, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call) Run(run func(ctx context.Context, orgId string, secret string, params *client.GetOrgsOrgIdSecretsSecretParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.GetOrgsOrgIdSecretsSecretParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call) RunAndReturn(run func(context.Context, string, string, *client.GetOrgsOrgIdSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetOrgsOrgIdSecretsSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelines provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetPipelines(ctx context.Context, params *client.GetPipelinesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelines")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetPipelinesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetPipelinesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetPipelinesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelines'
type MockClientInterface_GetPipelines_Call struct {
	*mock.Call
}

// GetPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetPipelinesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetPipelines(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetPipelines_Call {
	return &MockClientInterface_GetPipelines_Call{Call: _e.mock.On("GetPipelines",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetPipelines_Call) Run(run func(ctx context.Context, params *client.GetPipelinesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetPipelinesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetPipelines_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetPipelines_Call) RunAndReturn(run func(context.Context, *client.GetPipelinesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetQueueInfo(ctx context.Context, params *client.GetQueueInfoParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetQueueInfoParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetQueueInfoParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetQueueInfoParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockClientInterface_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetQueueInfoParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetQueueInfo(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetQueueInfo_Call {
	return &MockClientInterface_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetQueueInfo_Call) Run(run func(ctx context.Context, params *client.GetQueueInfoParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetQueueInfoParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetQueueInfo_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetQueueInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetQueueInfo_Call) RunAndReturn(run func(context.Context, *client.GetQueueInfoParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueNorunningpipelines provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetQueueNorunningpipelines(ctx context.Context, params *client.GetQueueNorunningpipelinesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueNorunningpipelines")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetQueueNorunningpipelinesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetQueueNorunningpipelinesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetQueueNorunningpipelinesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetQueueNorunningpipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueNorunningpipelines'
type MockClientInterface_GetQueueNorunningpipelines_Call struct {
	*mock.Call
}

// GetQueueNorunningpipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetQueueNorunningpipelinesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetQueueNorunningpipelines(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetQueueNorunningpipelines_Call {
	return &MockClientInterface_GetQueueNorunningpipelines_Call{Call: _e.mock.On("GetQueueNorunningpipelines",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetQueueNorunningpipelines_Call) Run(run func(ctx context.Context, params *client.GetQueueNorunningpipelinesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetQueueNorunningpipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetQueueNorunningpipelinesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetQueueNorunningpipelines_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetQueueNorunningpipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetQueueNorunningpipelines_Call) RunAndReturn(run func(context.Context, *client.GetQueueNorunningpipelinesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetQueueNorunningpipelines_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistries provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetRegistries(ctx context.Context, params *client.GetRegistriesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistries")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetRegistriesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetRegistriesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRegistries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistries'
type MockClientInterface_GetRegistries_Call struct {
	*mock.Call
}

// GetRegistries is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetRegistriesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRegistries(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetRegistries_Call {
	return &MockClientInterface_GetRegistries_Call{Call: _e.mock.On("GetRegistries",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRegistries_Call) Run(run func(ctx context.Context, params *client.GetRegistriesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetRegistries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetRegistriesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRegistries_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRegistries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRegistries_Call) RunAndReturn(run func(context.Context, *client.GetRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRegistries_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistriesRegistry provides a mock function with given fields: ctx, registry, params, reqEditors
func (_m *MockClientInterface) GetRegistriesRegistry(ctx context.Context, registry string, params *client.GetRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistriesRegistry'
type MockClientInterface_GetRegistriesRegistry_Call struct {
	*mock.Call
}

// GetRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - registry string
//   - params *client.GetRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRegistriesRegistry(ctx interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetRegistriesRegistry_Call {
	return &MockClientInterface_GetRegistriesRegistry_Call{Call: _e.mock.On("GetRegistriesRegistry",
		append([]interface{}{ctx, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRegistriesRegistry_Call) Run(run func(ctx context.Context, registry string, params *client.GetRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRegistriesRegistry_Call) RunAndReturn(run func(context.Context, string, *client.GetRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepos provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetRepos(ctx context.Context, params *client.GetReposParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRepos")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetReposParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetReposParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetReposParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepos'
type MockClientInterface_GetRepos_Call struct {
	*mock.Call
}

// GetRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetReposParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetRepos(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetRepos_Call {
	return &MockClientInterface_GetRepos_Call{Call: _e.mock.On("GetRepos",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetRepos_Call) Run(run func(ctx context.Context, params *client.GetReposParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetReposParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetRepos_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetRepos_Call) RunAndReturn(run func(context.Context, *client.GetReposParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetRepos_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposLookupRepoFullName provides a mock function with given fields: ctx, repoFullName, params, reqEditors
func (_m *MockClientInterface) GetReposLookupRepoFullName(ctx context.Context, repoFullName string, params *client.GetReposLookupRepoFullNameParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoFullName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposLookupRepoFullName")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetReposLookupRepoFullNameParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoFullName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetReposLookupRepoFullNameParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoFullName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetReposLookupRepoFullNameParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoFullName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposLookupRepoFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposLookupRepoFullName'
type MockClientInterface_GetReposLookupRepoFullName_Call struct {
	*mock.Call
}

// GetReposLookupRepoFullName is a helper method to define mock.On call
//   - ctx context.Context
//   - repoFullName string
//   - params *client.GetReposLookupRepoFullNameParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposLookupRepoFullName(ctx interface{}, repoFullName interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposLookupRepoFullName_Call {
	return &MockClientInterface_GetReposLookupRepoFullName_Call{Call: _e.mock.On("GetReposLookupRepoFullName",
		append([]interface{}{ctx, repoFullName, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposLookupRepoFullName_Call) Run(run func(ctx context.Context, repoFullName string, params *client.GetReposLookupRepoFullNameParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposLookupRepoFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetReposLookupRepoFullNameParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposLookupRepoFullName_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposLookupRepoFullName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposLookupRepoFullName_Call) RunAndReturn(run func(context.Context, string, *client.GetReposLookupRepoFullNameParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposLookupRepoFullName_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoId provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoId(ctx context.Context, repoId int, params *client.GetReposRepoIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoId")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoId'
type MockClientInterface_GetReposRepoId_Call struct {
	*mock.Call
}

// GetReposRepoId is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoId(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoId_Call {
	return &MockClientInterface_GetReposRepoId_Call{Call: _e.mock.On("GetReposRepoId",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoId_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoId_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoId_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoId_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdBranches provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdBranches(ctx context.Context, repoId int, params *client.GetReposRepoIdBranchesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdBranches")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdBranchesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdBranchesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdBranchesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdBranches'
type MockClientInterface_GetReposRepoIdBranches_Call struct {
	*mock.Call
}

// GetReposRepoIdBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdBranchesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdBranches(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdBranches_Call {
	return &MockClientInterface_GetReposRepoIdBranches_Call{Call: _e.mock.On("GetReposRepoIdBranches",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdBranches_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdBranchesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdBranchesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdBranches_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdBranches_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdBranchesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdBranches_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdCron provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdCron(ctx context.Context, repoId int, params *client.GetReposRepoIdCronParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdCron")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdCronParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdCronParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdCronParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdCron'
type MockClientInterface_GetReposRepoIdCron_Call struct {
	*mock.Call
}

// GetReposRepoIdCron is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdCronParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdCron(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdCron_Call {
	return &MockClientInterface_GetReposRepoIdCron_Call{Call: _e.mock.On("GetReposRepoIdCron",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdCron_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdCronParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdCronParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdCron_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdCron_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdCron_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdCronParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdCron_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdCronCron provides a mock function with given fields: ctx, repoId, cron, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *client.GetReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, cron, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdCronCron")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, cron, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdCronCronParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.GetReposRepoIdCronCronParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdCronCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdCronCron'
type MockClientInterface_GetReposRepoIdCronCron_Call struct {
	*mock.Call
}

// GetReposRepoIdCronCron is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - cron string
//   - params *client.GetReposRepoIdCronCronParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdCronCron(ctx interface{}, repoId interface{}, cron interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdCronCron_Call {
	return &MockClientInterface_GetReposRepoIdCronCron_Call{Call: _e.mock.On("GetReposRepoIdCronCron",
		append([]interface{}{ctx, repoId, cron, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdCronCron_Call) Run(run func(ctx context.Context, repoId int, cron string, params *client.GetReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdCronCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.GetReposRepoIdCronCronParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdCronCron_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdCronCron_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdCronCron_Call) RunAndReturn(run func(context.Context, int, string, *client.GetReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdCronCron_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdLogsNumberStepID provides a mock function with given fields: ctx, repoId, number, stepID, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdLogsNumberStepID(ctx context.Context, repoId int, number int, stepID int, params *client.GetReposRepoIdLogsNumberStepIDParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, stepID, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdLogsNumberStepID")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *client.GetReposRepoIdLogsNumberStepIDParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, stepID, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *client.GetReposRepoIdLogsNumberStepIDParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, stepID, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *client.GetReposRepoIdLogsNumberStepIDParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, stepID, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdLogsNumberStepID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdLogsNumberStepID'
type MockClientInterface_GetReposRepoIdLogsNumberStepID_Call struct {
	*mock.Call
}

// GetReposRepoIdLogsNumberStepID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - stepID int
//   - params *client.GetReposRepoIdLogsNumberStepIDParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdLogsNumberStepID(ctx interface{}, repoId interface{}, number interface{}, stepID interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call {
	return &MockClientInterface_GetReposRepoIdLogsNumberStepID_Call{Call: _e.mock.On("GetReposRepoIdLogsNumberStepID",
		append([]interface{}{ctx, repoId, number, stepID, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call) Run(run func(ctx context.Context, repoId int, number int, stepID int, params *client.GetReposRepoIdLogsNumberStepIDParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int), args[4].(*client.GetReposRepoIdLogsNumberStepIDParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call) RunAndReturn(run func(context.Context, int, int, int, *client.GetReposRepoIdLogsNumberStepIDParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdLogsNumberStepID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPermissions provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPermissions(ctx context.Context, repoId int, params *client.GetReposRepoIdPermissionsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPermissions")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPermissionsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPermissionsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdPermissionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPermissions'
type MockClientInterface_GetReposRepoIdPermissions_Call struct {
	*mock.Call
}

// GetReposRepoIdPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdPermissionsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPermissions(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPermissions_Call {
	return &MockClientInterface_GetReposRepoIdPermissions_Call{Call: _e.mock.On("GetReposRepoIdPermissions",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPermissions_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdPermissionsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdPermissionsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPermissions_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPermissions_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdPermissionsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPipelines provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPipelines(ctx context.Context, repoId int, params *client.GetReposRepoIdPipelinesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPipelines")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPipelinesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPipelinesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdPipelinesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPipelines'
type MockClientInterface_GetReposRepoIdPipelines_Call struct {
	*mock.Call
}

// GetReposRepoIdPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdPipelinesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPipelines(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPipelines_Call {
	return &MockClientInterface_GetReposRepoIdPipelines_Call{Call: _e.mock.On("GetReposRepoIdPipelines",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPipelines_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdPipelinesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdPipelinesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelines_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelines_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdPipelinesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPipelinesNumber provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPipelinesNumber")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPipelinesNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPipelinesNumber'
type MockClientInterface_GetReposRepoIdPipelinesNumber_Call struct {
	*mock.Call
}

// GetReposRepoIdPipelinesNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.GetReposRepoIdPipelinesNumberParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPipelinesNumber(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPipelinesNumber_Call {
	return &MockClientInterface_GetReposRepoIdPipelinesNumber_Call{Call: _e.mock.On("GetReposRepoIdPipelinesNumber",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumber_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPipelinesNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.GetReposRepoIdPipelinesNumberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumber_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumber_Call) RunAndReturn(run func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPipelinesNumberConfig provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPipelinesNumberConfig(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPipelinesNumberConfig")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberConfigParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberConfigParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberConfigParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPipelinesNumberConfig'
type MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call struct {
	*mock.Call
}

// GetReposRepoIdPipelinesNumberConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.GetReposRepoIdPipelinesNumberConfigParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPipelinesNumberConfig(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call {
	return &MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call{Call: _e.mock.On("GetReposRepoIdPipelinesNumberConfig",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberConfigParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.GetReposRepoIdPipelinesNumberConfigParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call) RunAndReturn(run func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberConfigParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPipelinesNumberConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPipelinesNumberMetadata provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPipelinesNumberMetadata(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPipelinesNumberMetadata")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberMetadataParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberMetadataParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberMetadataParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPipelinesNumberMetadata'
type MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call struct {
	*mock.Call
}

// GetReposRepoIdPipelinesNumberMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.GetReposRepoIdPipelinesNumberMetadataParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPipelinesNumberMetadata(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call {
	return &MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call{Call: _e.mock.On("GetReposRepoIdPipelinesNumberMetadata",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.GetReposRepoIdPipelinesNumberMetadataParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.GetReposRepoIdPipelinesNumberMetadataParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call) RunAndReturn(run func(context.Context, int, int, *client.GetReposRepoIdPipelinesNumberMetadataParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPipelinesNumberMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdPullRequests provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdPullRequests(ctx context.Context, repoId int, params *client.GetReposRepoIdPullRequestsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdPullRequests")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPullRequestsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdPullRequestsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdPullRequestsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdPullRequests'
type MockClientInterface_GetReposRepoIdPullRequests_Call struct {
	*mock.Call
}

// GetReposRepoIdPullRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdPullRequestsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdPullRequests(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdPullRequests_Call {
	return &MockClientInterface_GetReposRepoIdPullRequests_Call{Call: _e.mock.On("GetReposRepoIdPullRequests",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdPullRequests_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdPullRequestsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdPullRequestsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPullRequests_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdPullRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdPullRequests_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdPullRequestsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdPullRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdRegistries provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdRegistries(ctx context.Context, repoId int, params *client.GetReposRepoIdRegistriesParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdRegistries")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdRegistriesParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdRegistriesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdRegistries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdRegistries'
type MockClientInterface_GetReposRepoIdRegistries_Call struct {
	*mock.Call
}

// GetReposRepoIdRegistries is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdRegistriesParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdRegistries(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdRegistries_Call {
	return &MockClientInterface_GetReposRepoIdRegistries_Call{Call: _e.mock.On("GetReposRepoIdRegistries",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdRegistries_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdRegistriesParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdRegistries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdRegistriesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdRegistries_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdRegistries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdRegistries_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdRegistriesParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdRegistries_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdRegistriesRegistry provides a mock function with given fields: ctx, repoId, registry, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdRegistriesRegistry(ctx context.Context, repoId int, registry string, params *client.GetReposRepoIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, registry, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdRegistriesRegistry")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, registry, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, registry, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.GetReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, registry, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdRegistriesRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdRegistriesRegistry'
type MockClientInterface_GetReposRepoIdRegistriesRegistry_Call struct {
	*mock.Call
}

// GetReposRepoIdRegistriesRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - registry string
//   - params *client.GetReposRepoIdRegistriesRegistryParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdRegistriesRegistry(ctx interface{}, repoId interface{}, registry interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call {
	return &MockClientInterface_GetReposRepoIdRegistriesRegistry_Call{Call: _e.mock.On("GetReposRepoIdRegistriesRegistry",
		append([]interface{}{ctx, repoId, registry, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call) Run(run func(ctx context.Context, repoId int, registry string, params *client.GetReposRepoIdRegistriesRegistryParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.GetReposRepoIdRegistriesRegistryParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call) RunAndReturn(run func(context.Context, int, string, *client.GetReposRepoIdRegistriesRegistryParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdRegistriesRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdSecrets provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdSecrets(ctx context.Context, repoId int, params *client.GetReposRepoIdSecretsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdSecrets")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdSecretsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.GetReposRepoIdSecretsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.GetReposRepoIdSecretsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdSecrets'
type MockClientInterface_GetReposRepoIdSecrets_Call struct {
	*mock.Call
}

// GetReposRepoIdSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.GetReposRepoIdSecretsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdSecrets(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdSecrets_Call {
	return &MockClientInterface_GetReposRepoIdSecrets_Call{Call: _e.mock.On("GetReposRepoIdSecrets",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdSecrets_Call) Run(run func(ctx context.Context, repoId int, params *client.GetReposRepoIdSecretsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.GetReposRepoIdSecretsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdSecrets_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdSecrets_Call) RunAndReturn(run func(context.Context, int, *client.GetReposRepoIdSecretsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposRepoIdSecretsSecretName provides a mock function with given fields: ctx, repoId, secretName, params, reqEditors
func (_m *MockClientInterface) GetReposRepoIdSecretsSecretName(ctx context.Context, repoId int, secretName string, params *client.GetReposRepoIdSecretsSecretNameParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, secretName, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReposRepoIdSecretsSecretName")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, secretName, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.GetReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, secretName, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.GetReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, secretName, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetReposRepoIdSecretsSecretName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposRepoIdSecretsSecretName'
type MockClientInterface_GetReposRepoIdSecretsSecretName_Call struct {
	*mock.Call
}

// GetReposRepoIdSecretsSecretName is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - secretName string
//   - params *client.GetReposRepoIdSecretsSecretNameParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetReposRepoIdSecretsSecretName(ctx interface{}, repoId interface{}, secretName interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetReposRepoIdSecretsSecretName_Call {
	return &MockClientInterface_GetReposRepoIdSecretsSecretName_Call{Call: _e.mock.On("GetReposRepoIdSecretsSecretName",
		append([]interface{}{ctx, repoId, secretName, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetReposRepoIdSecretsSecretName_Call) Run(run func(ctx context.Context, repoId int, secretName string, params *client.GetReposRepoIdSecretsSecretNameParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetReposRepoIdSecretsSecretName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.GetReposRepoIdSecretsSecretNameParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdSecretsSecretName_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetReposRepoIdSecretsSecretName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetReposRepoIdSecretsSecretName_Call) RunAndReturn(run func(context.Context, int, string, *client.GetReposRepoIdSecretsSecretNameParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetReposRepoIdSecretsSecretName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecrets provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetSecrets(ctx context.Context, params *client.GetSecretsParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecrets")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetSecretsParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetSecretsParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetSecretsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecrets'
type MockClientInterface_GetSecrets_Call struct {
	*mock.Call
}

// GetSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetSecretsParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSecrets(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetSecrets_Call {
	return &MockClientInterface_GetSecrets_Call{Call: _e.mock.On("GetSecrets",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSecrets_Call) Run(run func(ctx context.Context, params *client.GetSecretsParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetSecretsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSecrets_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSecrets_Call) RunAndReturn(run func(context.Context, *client.GetSecretsParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretsSecret provides a mock function with given fields: ctx, secret, params, reqEditors
func (_m *MockClientInterface) GetSecretsSecret(ctx context.Context, secret string, params *client.GetSecretsSecretParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, secret, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretsSecret")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, secret, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetSecretsSecretParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, secret, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetSecretsSecretParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, secret, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSecretsSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretsSecret'
type MockClientInterface_GetSecretsSecret_Call struct {
	*mock.Call
}

// GetSecretsSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret string
//   - params *client.GetSecretsSecretParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSecretsSecret(ctx interface{}, secret interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetSecretsSecret_Call {
	return &MockClientInterface_GetSecretsSecret_Call{Call: _e.mock.On("GetSecretsSecret",
		append([]interface{}{ctx, secret, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSecretsSecret_Call) Run(run func(ctx context.Context, secret string, params *client.GetSecretsSecretParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetSecretsSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetSecretsSecretParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSecretsSecret_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSecretsSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSecretsSecret_Call) RunAndReturn(run func(context.Context, string, *client.GetSecretsSecretParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSecretsSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignaturePublicKey provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetSignaturePublicKey(ctx context.Context, params *client.GetSignaturePublicKeyParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSignaturePublicKey")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetSignaturePublicKeyParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetSignaturePublicKeyParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetSignaturePublicKeyParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetSignaturePublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignaturePublicKey'
type MockClientInterface_GetSignaturePublicKey_Call struct {
	*mock.Call
}

// GetSignaturePublicKey is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetSignaturePublicKeyParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetSignaturePublicKey(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetSignaturePublicKey_Call {
	return &MockClientInterface_GetSignaturePublicKey_Call{Call: _e.mock.On("GetSignaturePublicKey",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetSignaturePublicKey_Call) Run(run func(ctx context.Context, params *client.GetSignaturePublicKeyParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetSignaturePublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetSignaturePublicKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetSignaturePublicKey_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetSignaturePublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetSignaturePublicKey_Call) RunAndReturn(run func(context.Context, *client.GetSignaturePublicKeyParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetSignaturePublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamEvents provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientInterface) GetStreamEvents(ctx context.Context, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamEvents")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetStreamEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamEvents'
type MockClientInterface_GetStreamEvents_Call struct {
	*mock.Call
}

// GetStreamEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetStreamEvents(ctx interface{}, reqEditors ...interface{}) *MockClientInterface_GetStreamEvents_Call {
	return &MockClientInterface_GetStreamEvents_Call{Call: _e.mock.On("GetStreamEvents",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetStreamEvents_Call) Run(run func(ctx context.Context, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetStreamEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetStreamEvents_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetStreamEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetStreamEvents_Call) RunAndReturn(run func(context.Context, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetStreamEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamLogsRepoIdPipelineStepID provides a mock function with given fields: ctx, repoId, pipeline, stepID, reqEditors
func (_m *MockClientInterface) GetStreamLogsRepoIdPipelineStepID(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, pipeline, stepID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamLogsRepoIdPipelineStepID")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, pipeline, stepID, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, pipeline, stepID, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, pipeline, stepID, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamLogsRepoIdPipelineStepID'
type MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call struct {
	*mock.Call
}

// GetStreamLogsRepoIdPipelineStepID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - pipeline int
//   - stepID int
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetStreamLogsRepoIdPipelineStepID(ctx interface{}, repoId interface{}, pipeline interface{}, stepID interface{}, reqEditors ...interface{}) *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call {
	return &MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call{Call: _e.mock.On("GetStreamLogsRepoIdPipelineStepID",
		append([]interface{}{ctx, repoId, pipeline, stepID}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call) Run(run func(ctx context.Context, repoId int, pipeline int, stepID int, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call) RunAndReturn(run func(context.Context, int, int, int, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetStreamLogsRepoIdPipelineStepID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetUser(ctx context.Context, params *client.GetUserParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetUserParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClientInterface_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetUserParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetUser(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetUser_Call {
	return &MockClientInterface_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetUser_Call) Run(run func(ctx context.Context, params *client.GetUserParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetUser_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUser_Call) RunAndReturn(run func(context.Context, *client.GetUserParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFeed provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetUserFeed(ctx context.Context, params *client.GetUserFeedParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFeed")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserFeedParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserFeedParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetUserFeedParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFeed'
type MockClientInterface_GetUserFeed_Call struct {
	*mock.Call
}

// GetUserFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetUserFeedParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetUserFeed(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetUserFeed_Call {
	return &MockClientInterface_GetUserFeed_Call{Call: _e.mock.On("GetUserFeed",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetUserFeed_Call) Run(run func(ctx context.Context, params *client.GetUserFeedParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetUserFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetUserFeedParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetUserFeed_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetUserFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserFeed_Call) RunAndReturn(run func(context.Context, *client.GetUserFeedParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetUserFeed_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRepos provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetUserRepos(ctx context.Context, params *client.GetUserReposParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRepos")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserReposParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUserReposParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetUserReposParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRepos'
type MockClientInterface_GetUserRepos_Call struct {
	*mock.Call
}

// GetUserRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetUserReposParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetUserRepos(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetUserRepos_Call {
	return &MockClientInterface_GetUserRepos_Call{Call: _e.mock.On("GetUserRepos",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetUserRepos_Call) Run(run func(ctx context.Context, params *client.GetUserReposParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetUserRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetUserReposParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetUserRepos_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetUserRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserRepos_Call) RunAndReturn(run func(context.Context, *client.GetUserReposParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetUserRepos_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetUsers(ctx context.Context, params *client.GetUsersParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUsersParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.GetUsersParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.GetUsersParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockClientInterface_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.GetUsersParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetUsers(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetUsers_Call {
	return &MockClientInterface_GetUsers_Call{Call: _e.mock.On("GetUsers",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetUsers_Call) Run(run func(ctx context.Context, params *client.GetUsersParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.GetUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetUsers_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUsers_Call) RunAndReturn(run func(context.Context, *client.GetUsersParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersLogin provides a mock function with given fields: ctx, login, params, reqEditors
func (_m *MockClientInterface) GetUsersLogin(ctx context.Context, login string, params *client.GetUsersLoginParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, login, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersLogin")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetUsersLoginParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, login, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.GetUsersLoginParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, login, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.GetUsersLoginParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, login, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUsersLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersLogin'
type MockClientInterface_GetUsersLogin_Call struct {
	*mock.Call
}

// GetUsersLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - params *client.GetUsersLoginParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetUsersLogin(ctx interface{}, login interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetUsersLogin_Call {
	return &MockClientInterface_GetUsersLogin_Call{Call: _e.mock.On("GetUsersLogin",
		append([]interface{}{ctx, login, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetUsersLogin_Call) Run(run func(ctx context.Context, login string, params *client.GetUsersLoginParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetUsersLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.GetUsersLoginParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetUsersLogin_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetUsersLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUsersLogin_Call) RunAndReturn(run func(context.Context, string, *client.GetUsersLoginParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetUsersLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: ctx, reqEditors
func (_m *MockClientInterface) GetVersion(ctx context.Context, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockClientInterface_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetVersion(ctx interface{}, reqEditors ...interface{}) *MockClientInterface_GetVersion_Call {
	return &MockClientInterface_GetVersion_Call{Call: _e.mock.On("GetVersion",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetVersion_Call) Run(run func(ctx context.Context, reqEditors ...client.RequestEditorFn)) *MockClientInterface_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetVersion_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetVersion_Call) RunAndReturn(run func(context.Context, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PatchAgentsAgentIdWithBody provides a mock function with given fields: ctx, agentId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchAgentsAgentIdWithBody(ctx context.Context, agentId int, params *client.PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, agentId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchAgentsAgentIdWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, agentId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, agentId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PatchAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, agentId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchAgentsAgentIdWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchAgentsAgentIdWithBody'
type MockClientInterface_PatchAgentsAgentIdWithBody_Call struct {
	*mock.Call
}

// PatchAgentsAgentIdWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - agentId int
//   - params *client.PatchAgentsAgentIdParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchAgentsAgentIdWithBody(ctx interface{}, agentId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchAgentsAgentIdWithBody_Call {
	return &MockClientInterface_PatchAgentsAgentIdWithBody_Call{Call: _e.mock.On("PatchAgentsAgentIdWithBody",
		append([]interface{}{ctx, agentId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchAgentsAgentIdWithBody_Call) Run(run func(ctx context.Context, agentId int, params *client.PatchAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchAgentsAgentIdWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PatchAgentsAgentIdParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchAgentsAgentIdWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchAgentsAgentIdWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchAgentsAgentIdWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PatchAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchAgentsAgentIdWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchForgesForgeIdWithBody provides a mock function with given fields: ctx, forgeId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchForgesForgeIdWithBody(ctx context.Context, forgeId int, params *client.PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, forgeId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchForgesForgeIdWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchForgesForgeIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, forgeId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchForgesForgeIdParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, forgeId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PatchForgesForgeIdParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, forgeId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchForgesForgeIdWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchForgesForgeIdWithBody'
type MockClientInterface_PatchForgesForgeIdWithBody_Call struct {
	*mock.Call
}

// PatchForgesForgeIdWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - forgeId int
//   - params *client.PatchForgesForgeIdParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchForgesForgeIdWithBody(ctx interface{}, forgeId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchForgesForgeIdWithBody_Call {
	return &MockClientInterface_PatchForgesForgeIdWithBody_Call{Call: _e.mock.On("PatchForgesForgeIdWithBody",
		append([]interface{}{ctx, forgeId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchForgesForgeIdWithBody_Call) Run(run func(ctx context.Context, forgeId int, params *client.PatchForgesForgeIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchForgesForgeIdWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PatchForgesForgeIdParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchForgesForgeIdWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchForgesForgeIdWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchForgesForgeIdWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PatchForgesForgeIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchForgesForgeIdWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchOrgsOrgIdAgentsAgentIdWithBody provides a mock function with given fields: ctx, orgId, agentId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchOrgsOrgIdAgentsAgentIdWithBody(ctx context.Context, orgId int, agentId int, params *client.PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, agentId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchOrgsOrgIdAgentsAgentIdWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PatchOrgsOrgIdAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, agentId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PatchOrgsOrgIdAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, agentId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.PatchOrgsOrgIdAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, agentId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsOrgIdAgentsAgentIdWithBody'
type MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call struct {
	*mock.Call
}

// PatchOrgsOrgIdAgentsAgentIdWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId int
//   - agentId int
//   - params *client.PatchOrgsOrgIdAgentsAgentIdParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchOrgsOrgIdAgentsAgentIdWithBody(ctx interface{}, orgId interface{}, agentId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call {
	return &MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call{Call: _e.mock.On("PatchOrgsOrgIdAgentsAgentIdWithBody",
		append([]interface{}{ctx, orgId, agentId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call) Run(run func(ctx context.Context, orgId int, agentId int, params *client.PatchOrgsOrgIdAgentsAgentIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.PatchOrgsOrgIdAgentsAgentIdParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call) RunAndReturn(run func(context.Context, int, int, *client.PatchOrgsOrgIdAgentsAgentIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchOrgsOrgIdAgentsAgentIdWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchOrgsOrgIdRegistriesRegistryWithBody provides a mock function with given fields: ctx, orgId, registry, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchOrgsOrgIdRegistriesRegistryWithBody(ctx context.Context, orgId string, registry string, params *client.PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, registry, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchOrgsOrgIdRegistriesRegistryWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.PatchOrgsOrgIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, registry, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.PatchOrgsOrgIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, registry, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.PatchOrgsOrgIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, registry, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsOrgIdRegistriesRegistryWithBody'
type MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call struct {
	*mock.Call
}

// PatchOrgsOrgIdRegistriesRegistryWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - registry string
//   - params *client.PatchOrgsOrgIdRegistriesRegistryParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchOrgsOrgIdRegistriesRegistryWithBody(ctx interface{}, orgId interface{}, registry interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call {
	return &MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call{Call: _e.mock.On("PatchOrgsOrgIdRegistriesRegistryWithBody",
		append([]interface{}{ctx, orgId, registry, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call) Run(run func(ctx context.Context, orgId string, registry string, params *client.PatchOrgsOrgIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.PatchOrgsOrgIdRegistriesRegistryParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call) RunAndReturn(run func(context.Context, string, string, *client.PatchOrgsOrgIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchOrgsOrgIdRegistriesRegistryWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchOrgsOrgIdSecretsSecretWithBody provides a mock function with given fields: ctx, orgId, secret, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchOrgsOrgIdSecretsSecretWithBody(ctx context.Context, orgId string, secret string, params *client.PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, secret, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchOrgsOrgIdSecretsSecretWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.PatchOrgsOrgIdSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, secret, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *client.PatchOrgsOrgIdSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, secret, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *client.PatchOrgsOrgIdSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, secret, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchOrgsOrgIdSecretsSecretWithBody'
type MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call struct {
	*mock.Call
}

// PatchOrgsOrgIdSecretsSecretWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - secret string
//   - params *client.PatchOrgsOrgIdSecretsSecretParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchOrgsOrgIdSecretsSecretWithBody(ctx interface{}, orgId interface{}, secret interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call {
	return &MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call{Call: _e.mock.On("PatchOrgsOrgIdSecretsSecretWithBody",
		append([]interface{}{ctx, orgId, secret, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call) Run(run func(ctx context.Context, orgId string, secret string, params *client.PatchOrgsOrgIdSecretsSecretParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*client.PatchOrgsOrgIdSecretsSecretParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call) RunAndReturn(run func(context.Context, string, string, *client.PatchOrgsOrgIdSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchOrgsOrgIdSecretsSecretWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchRegistriesRegistryWithBody provides a mock function with given fields: ctx, registry, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchRegistriesRegistryWithBody(ctx context.Context, registry string, params *client.PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, registry, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchRegistriesRegistryWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, registry, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, registry, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PatchRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, registry, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchRegistriesRegistryWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchRegistriesRegistryWithBody'
type MockClientInterface_PatchRegistriesRegistryWithBody_Call struct {
	*mock.Call
}

// PatchRegistriesRegistryWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - registry string
//   - params *client.PatchRegistriesRegistryParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchRegistriesRegistryWithBody(ctx interface{}, registry interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchRegistriesRegistryWithBody_Call {
	return &MockClientInterface_PatchRegistriesRegistryWithBody_Call{Call: _e.mock.On("PatchRegistriesRegistryWithBody",
		append([]interface{}{ctx, registry, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchRegistriesRegistryWithBody_Call) Run(run func(ctx context.Context, registry string, params *client.PatchRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchRegistriesRegistryWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PatchRegistriesRegistryParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchRegistriesRegistryWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchRegistriesRegistryWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchRegistriesRegistryWithBody_Call) RunAndReturn(run func(context.Context, string, *client.PatchRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchRegistriesRegistryWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchReposRepoIdCronCronWithBody provides a mock function with given fields: ctx, repoId, cron, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchReposRepoIdCronCronWithBody(ctx context.Context, repoId int, cron string, params *client.PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, cron, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchReposRepoIdCronCronWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdCronCronParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, cron, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdCronCronParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, cron, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.PatchReposRepoIdCronCronParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, cron, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchReposRepoIdCronCronWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReposRepoIdCronCronWithBody'
type MockClientInterface_PatchReposRepoIdCronCronWithBody_Call struct {
	*mock.Call
}

// PatchReposRepoIdCronCronWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - cron string
//   - params *client.PatchReposRepoIdCronCronParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchReposRepoIdCronCronWithBody(ctx interface{}, repoId interface{}, cron interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call {
	return &MockClientInterface_PatchReposRepoIdCronCronWithBody_Call{Call: _e.mock.On("PatchReposRepoIdCronCronWithBody",
		append([]interface{}{ctx, repoId, cron, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call) Run(run func(ctx context.Context, repoId int, cron string, params *client.PatchReposRepoIdCronCronParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.PatchReposRepoIdCronCronParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call) RunAndReturn(run func(context.Context, int, string, *client.PatchReposRepoIdCronCronParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchReposRepoIdCronCronWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchReposRepoIdRegistriesRegistryWithBody provides a mock function with given fields: ctx, repoId, registry, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchReposRepoIdRegistriesRegistryWithBody(ctx context.Context, repoId int, registry string, params *client.PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, registry, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchReposRepoIdRegistriesRegistryWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, registry, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, registry, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.PatchReposRepoIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, registry, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReposRepoIdRegistriesRegistryWithBody'
type MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call struct {
	*mock.Call
}

// PatchReposRepoIdRegistriesRegistryWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - registry string
//   - params *client.PatchReposRepoIdRegistriesRegistryParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchReposRepoIdRegistriesRegistryWithBody(ctx interface{}, repoId interface{}, registry interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call {
	return &MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call{Call: _e.mock.On("PatchReposRepoIdRegistriesRegistryWithBody",
		append([]interface{}{ctx, repoId, registry, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call) Run(run func(ctx context.Context, repoId int, registry string, params *client.PatchReposRepoIdRegistriesRegistryParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.PatchReposRepoIdRegistriesRegistryParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call) RunAndReturn(run func(context.Context, int, string, *client.PatchReposRepoIdRegistriesRegistryParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchReposRepoIdRegistriesRegistryWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchReposRepoIdSecretsSecretNameWithBody provides a mock function with given fields: ctx, repoId, secretName, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchReposRepoIdSecretsSecretNameWithBody(ctx context.Context, repoId int, secretName string, params *client.PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, secretName, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchReposRepoIdSecretsSecretNameWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdSecretsSecretNameParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, secretName, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PatchReposRepoIdSecretsSecretNameParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, secretName, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.PatchReposRepoIdSecretsSecretNameParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, secretName, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReposRepoIdSecretsSecretNameWithBody'
type MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call struct {
	*mock.Call
}

// PatchReposRepoIdSecretsSecretNameWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - secretName string
//   - params *client.PatchReposRepoIdSecretsSecretNameParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchReposRepoIdSecretsSecretNameWithBody(ctx interface{}, repoId interface{}, secretName interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call {
	return &MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call{Call: _e.mock.On("PatchReposRepoIdSecretsSecretNameWithBody",
		append([]interface{}{ctx, repoId, secretName, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call) Run(run func(ctx context.Context, repoId int, secretName string, params *client.PatchReposRepoIdSecretsSecretNameParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.PatchReposRepoIdSecretsSecretNameParams), args[4].(string), args[5].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call) RunAndReturn(run func(context.Context, int, string, *client.PatchReposRepoIdSecretsSecretNameParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchReposRepoIdSecretsSecretNameWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchReposRepoIdWithBody provides a mock function with given fields: ctx, repoId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchReposRepoIdWithBody(ctx context.Context, repoId int, params *client.PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchReposRepoIdWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchReposRepoIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PatchReposRepoIdParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PatchReposRepoIdParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchReposRepoIdWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchReposRepoIdWithBody'
type MockClientInterface_PatchReposRepoIdWithBody_Call struct {
	*mock.Call
}

// PatchReposRepoIdWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PatchReposRepoIdParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchReposRepoIdWithBody(ctx interface{}, repoId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchReposRepoIdWithBody_Call {
	return &MockClientInterface_PatchReposRepoIdWithBody_Call{Call: _e.mock.On("PatchReposRepoIdWithBody",
		append([]interface{}{ctx, repoId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchReposRepoIdWithBody_Call) Run(run func(ctx context.Context, repoId int, params *client.PatchReposRepoIdParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchReposRepoIdWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PatchReposRepoIdParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchReposRepoIdWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchReposRepoIdWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PatchReposRepoIdParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchReposRepoIdWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchSecretsSecretWithBody provides a mock function with given fields: ctx, secret, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchSecretsSecretWithBody(ctx context.Context, secret string, params *client.PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, secret, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchSecretsSecretWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, secret, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, secret, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PatchSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, secret, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchSecretsSecretWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchSecretsSecretWithBody'
type MockClientInterface_PatchSecretsSecretWithBody_Call struct {
	*mock.Call
}

// PatchSecretsSecretWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - secret string
//   - params *client.PatchSecretsSecretParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchSecretsSecretWithBody(ctx interface{}, secret interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchSecretsSecretWithBody_Call {
	return &MockClientInterface_PatchSecretsSecretWithBody_Call{Call: _e.mock.On("PatchSecretsSecretWithBody",
		append([]interface{}{ctx, secret, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchSecretsSecretWithBody_Call) Run(run func(ctx context.Context, secret string, params *client.PatchSecretsSecretParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchSecretsSecretWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PatchSecretsSecretParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchSecretsSecretWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchSecretsSecretWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchSecretsSecretWithBody_Call) RunAndReturn(run func(context.Context, string, *client.PatchSecretsSecretParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchSecretsSecretWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PatchUsersLogin provides a mock function with given fields: ctx, login, params, body, reqEditors
func (_m *MockClientInterface) PatchUsersLogin(ctx context.Context, login string, params *client.PatchUsersLoginParams, body client.PatchUsersLoginJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, login, params, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchUsersLogin")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchUsersLoginParams, client.PatchUsersLoginJSONRequestBody, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, login, params, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchUsersLoginParams, client.PatchUsersLoginJSONRequestBody, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, login, params, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PatchUsersLoginParams, client.PatchUsersLoginJSONRequestBody, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, login, params, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchUsersLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersLogin'
type MockClientInterface_PatchUsersLogin_Call struct {
	*mock.Call
}

// PatchUsersLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - params *client.PatchUsersLoginParams
//   - body client.PatchUsersLoginJSONRequestBody
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchUsersLogin(ctx interface{}, login interface{}, params interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchUsersLogin_Call {
	return &MockClientInterface_PatchUsersLogin_Call{Call: _e.mock.On("PatchUsersLogin",
		append([]interface{}{ctx, login, params, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchUsersLogin_Call) Run(run func(ctx context.Context, login string, params *client.PatchUsersLoginParams, body client.PatchUsersLoginJSONRequestBody, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchUsersLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PatchUsersLoginParams), args[3].(client.PatchUsersLoginJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchUsersLogin_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchUsersLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchUsersLogin_Call) RunAndReturn(run func(context.Context, string, *client.PatchUsersLoginParams, client.PatchUsersLoginJSONRequestBody, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchUsersLogin_Call {
	_c.Call.Return(run)
	return _c
}

// PatchUsersLoginWithBody provides a mock function with given fields: ctx, login, params, contentType, body, reqEditors
func (_m *MockClientInterface) PatchUsersLoginWithBody(ctx context.Context, login string, params *client.PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, login, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PatchUsersLoginWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchUsersLoginParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, login, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PatchUsersLoginParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, login, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PatchUsersLoginParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, login, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PatchUsersLoginWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchUsersLoginWithBody'
type MockClientInterface_PatchUsersLoginWithBody_Call struct {
	*mock.Call
}

// PatchUsersLoginWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - params *client.PatchUsersLoginParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PatchUsersLoginWithBody(ctx interface{}, login interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PatchUsersLoginWithBody_Call {
	return &MockClientInterface_PatchUsersLoginWithBody_Call{Call: _e.mock.On("PatchUsersLoginWithBody",
		append([]interface{}{ctx, login, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PatchUsersLoginWithBody_Call) Run(run func(ctx context.Context, login string, params *client.PatchUsersLoginParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PatchUsersLoginWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PatchUsersLoginParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PatchUsersLoginWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PatchUsersLoginWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PatchUsersLoginWithBody_Call) RunAndReturn(run func(context.Context, string, *client.PatchUsersLoginParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PatchUsersLoginWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostAgentsWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostAgentsWithBody(ctx context.Context, params *client.PostAgentsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAgentsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostAgentsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostAgentsParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostAgentsParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostAgentsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAgentsWithBody'
type MockClientInterface_PostAgentsWithBody_Call struct {
	*mock.Call
}

// PostAgentsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostAgentsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostAgentsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostAgentsWithBody_Call {
	return &MockClientInterface_PostAgentsWithBody_Call{Call: _e.mock.On("PostAgentsWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostAgentsWithBody_Call) Run(run func(ctx context.Context, params *client.PostAgentsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostAgentsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostAgentsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostAgentsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostAgentsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostAgentsWithBody_Call) RunAndReturn(run func(context.Context, *client.PostAgentsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostAgentsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostDebugPprofSymbol provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostDebugPprofSymbol(ctx context.Context, params *client.PostDebugPprofSymbolParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostDebugPprofSymbol")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostDebugPprofSymbolParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostDebugPprofSymbolParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostDebugPprofSymbolParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostDebugPprofSymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostDebugPprofSymbol'
type MockClientInterface_PostDebugPprofSymbol_Call struct {
	*mock.Call
}

// PostDebugPprofSymbol is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostDebugPprofSymbolParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostDebugPprofSymbol(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostDebugPprofSymbol_Call {
	return &MockClientInterface_PostDebugPprofSymbol_Call{Call: _e.mock.On("PostDebugPprofSymbol",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostDebugPprofSymbol_Call) Run(run func(ctx context.Context, params *client.PostDebugPprofSymbolParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostDebugPprofSymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostDebugPprofSymbolParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostDebugPprofSymbol_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostDebugPprofSymbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostDebugPprofSymbol_Call) RunAndReturn(run func(context.Context, *client.PostDebugPprofSymbolParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostDebugPprofSymbol_Call {
	_c.Call.Return(run)
	return _c
}

// PostForgesWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostForgesWithBody(ctx context.Context, params *client.PostForgesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostForgesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostForgesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostForgesParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostForgesParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostForgesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostForgesWithBody'
type MockClientInterface_PostForgesWithBody_Call struct {
	*mock.Call
}

// PostForgesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostForgesParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostForgesWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostForgesWithBody_Call {
	return &MockClientInterface_PostForgesWithBody_Call{Call: _e.mock.On("PostForgesWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostForgesWithBody_Call) Run(run func(ctx context.Context, params *client.PostForgesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostForgesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostForgesParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostForgesWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostForgesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostForgesWithBody_Call) RunAndReturn(run func(context.Context, *client.PostForgesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostForgesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostHookWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClientInterface) PostHookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostHookWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostHookWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostHookWithBody'
type MockClientInterface_PostHookWithBody_Call struct {
	*mock.Call
}

// PostHookWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostHookWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostHookWithBody_Call {
	return &MockClientInterface_PostHookWithBody_Call{Call: _e.mock.On("PostHookWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostHookWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostHookWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostHookWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostHookWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostHookWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostHookWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostLogLevelWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostLogLevelWithBody(ctx context.Context, params *client.PostLogLevelParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostLogLevelWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostLogLevelParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostLogLevelParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostLogLevelParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostLogLevelWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLogLevelWithBody'
type MockClientInterface_PostLogLevelWithBody_Call struct {
	*mock.Call
}

// PostLogLevelWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostLogLevelParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostLogLevelWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostLogLevelWithBody_Call {
	return &MockClientInterface_PostLogLevelWithBody_Call{Call: _e.mock.On("PostLogLevelWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostLogLevelWithBody_Call) Run(run func(ctx context.Context, params *client.PostLogLevelParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostLogLevelWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostLogLevelParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostLogLevelWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostLogLevelWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostLogLevelWithBody_Call) RunAndReturn(run func(context.Context, *client.PostLogLevelParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostLogLevelWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostOrgsOrgIdAgentsWithBody provides a mock function with given fields: ctx, orgId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostOrgsOrgIdAgentsWithBody(ctx context.Context, orgId int, params *client.PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostOrgsOrgIdAgentsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostOrgsOrgIdAgentsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostOrgsOrgIdAgentsParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostOrgsOrgIdAgentsParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsOrgIdAgentsWithBody'
type MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call struct {
	*mock.Call
}

// PostOrgsOrgIdAgentsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId int
//   - params *client.PostOrgsOrgIdAgentsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostOrgsOrgIdAgentsWithBody(ctx interface{}, orgId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call {
	return &MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call{Call: _e.mock.On("PostOrgsOrgIdAgentsWithBody",
		append([]interface{}{ctx, orgId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call) Run(run func(ctx context.Context, orgId int, params *client.PostOrgsOrgIdAgentsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostOrgsOrgIdAgentsParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PostOrgsOrgIdAgentsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostOrgsOrgIdAgentsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostOrgsOrgIdRegistriesWithBody provides a mock function with given fields: ctx, orgId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostOrgsOrgIdRegistriesWithBody(ctx context.Context, orgId string, params *client.PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostOrgsOrgIdRegistriesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PostOrgsOrgIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PostOrgsOrgIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PostOrgsOrgIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsOrgIdRegistriesWithBody'
type MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call struct {
	*mock.Call
}

// PostOrgsOrgIdRegistriesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.PostOrgsOrgIdRegistriesParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostOrgsOrgIdRegistriesWithBody(ctx interface{}, orgId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call {
	return &MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call{Call: _e.mock.On("PostOrgsOrgIdRegistriesWithBody",
		append([]interface{}{ctx, orgId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call) Run(run func(ctx context.Context, orgId string, params *client.PostOrgsOrgIdRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PostOrgsOrgIdRegistriesParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call) RunAndReturn(run func(context.Context, string, *client.PostOrgsOrgIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostOrgsOrgIdRegistriesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostOrgsOrgIdSecretsWithBody provides a mock function with given fields: ctx, orgId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostOrgsOrgIdSecretsWithBody(ctx context.Context, orgId string, params *client.PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostOrgsOrgIdSecretsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PostOrgsOrgIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, orgId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *client.PostOrgsOrgIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *client.PostOrgsOrgIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostOrgsOrgIdSecretsWithBody'
type MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call struct {
	*mock.Call
}

// PostOrgsOrgIdSecretsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
//   - params *client.PostOrgsOrgIdSecretsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostOrgsOrgIdSecretsWithBody(ctx interface{}, orgId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call {
	return &MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call{Call: _e.mock.On("PostOrgsOrgIdSecretsWithBody",
		append([]interface{}{ctx, orgId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call) Run(run func(ctx context.Context, orgId string, params *client.PostOrgsOrgIdSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*client.PostOrgsOrgIdSecretsParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call) RunAndReturn(run func(context.Context, string, *client.PostOrgsOrgIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostOrgsOrgIdSecretsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostQueuePause provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostQueuePause(ctx context.Context, params *client.PostQueuePauseParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostQueuePause")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostQueuePauseParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostQueuePauseParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostQueuePauseParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostQueuePause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueuePause'
type MockClientInterface_PostQueuePause_Call struct {
	*mock.Call
}

// PostQueuePause is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostQueuePauseParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostQueuePause(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostQueuePause_Call {
	return &MockClientInterface_PostQueuePause_Call{Call: _e.mock.On("PostQueuePause",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostQueuePause_Call) Run(run func(ctx context.Context, params *client.PostQueuePauseParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostQueuePause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostQueuePauseParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostQueuePause_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostQueuePause_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostQueuePause_Call) RunAndReturn(run func(context.Context, *client.PostQueuePauseParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostQueuePause_Call {
	_c.Call.Return(run)
	return _c
}

// PostQueueResume provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostQueueResume(ctx context.Context, params *client.PostQueueResumeParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostQueueResume")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostQueueResumeParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostQueueResumeParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostQueueResumeParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostQueueResume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostQueueResume'
type MockClientInterface_PostQueueResume_Call struct {
	*mock.Call
}

// PostQueueResume is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostQueueResumeParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostQueueResume(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostQueueResume_Call {
	return &MockClientInterface_PostQueueResume_Call{Call: _e.mock.On("PostQueueResume",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostQueueResume_Call) Run(run func(ctx context.Context, params *client.PostQueueResumeParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostQueueResume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostQueueResumeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostQueueResume_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostQueueResume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostQueueResume_Call) RunAndReturn(run func(context.Context, *client.PostQueueResumeParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostQueueResume_Call {
	_c.Call.Return(run)
	return _c
}

// PostRegistriesWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostRegistriesWithBody(ctx context.Context, params *client.PostRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostRegistriesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostRegistriesParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostRegistriesParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostRegistriesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRegistriesWithBody'
type MockClientInterface_PostRegistriesWithBody_Call struct {
	*mock.Call
}

// PostRegistriesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostRegistriesParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostRegistriesWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostRegistriesWithBody_Call {
	return &MockClientInterface_PostRegistriesWithBody_Call{Call: _e.mock.On("PostRegistriesWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostRegistriesWithBody_Call) Run(run func(ctx context.Context, params *client.PostRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostRegistriesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostRegistriesParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostRegistriesWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostRegistriesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostRegistriesWithBody_Call) RunAndReturn(run func(context.Context, *client.PostRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostRegistriesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostRepos provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostRepos(ctx context.Context, params *client.PostReposParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostRepos")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostReposParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostReposParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostReposParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostRepos'
type MockClientInterface_PostRepos_Call struct {
	*mock.Call
}

// PostRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostReposParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostRepos(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostRepos_Call {
	return &MockClientInterface_PostRepos_Call{Call: _e.mock.On("PostRepos",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostRepos_Call) Run(run func(ctx context.Context, params *client.PostReposParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostReposParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostRepos_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostRepos_Call) RunAndReturn(run func(context.Context, *client.PostReposParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostRepos_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepair provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostReposRepair(ctx context.Context, params *client.PostReposRepairParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepair")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostReposRepairParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostReposRepairParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostReposRepairParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepair'
type MockClientInterface_PostReposRepair_Call struct {
	*mock.Call
}

// PostReposRepair is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostReposRepairParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepair(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepair_Call {
	return &MockClientInterface_PostReposRepair_Call{Call: _e.mock.On("PostReposRepair",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepair_Call) Run(run func(ctx context.Context, params *client.PostReposRepairParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostReposRepairParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepair_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepair_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepair_Call) RunAndReturn(run func(context.Context, *client.PostReposRepairParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepair_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdChown provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdChown(ctx context.Context, repoId int, params *client.PostReposRepoIdChownParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdChown")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdChownParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdChownParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdChownParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdChown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdChown'
type MockClientInterface_PostReposRepoIdChown_Call struct {
	*mock.Call
}

// PostReposRepoIdChown is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdChownParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdChown(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdChown_Call {
	return &MockClientInterface_PostReposRepoIdChown_Call{Call: _e.mock.On("PostReposRepoIdChown",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdChown_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdChownParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdChown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdChownParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdChown_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdChown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdChown_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdChownParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdChown_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdCronCron provides a mock function with given fields: ctx, repoId, cron, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdCronCron(ctx context.Context, repoId int, cron string, params *client.PostReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, cron, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdCronCron")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PostReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, cron, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *client.PostReposRepoIdCronCronParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *client.PostReposRepoIdCronCronParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, cron, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdCronCron_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdCronCron'
type MockClientInterface_PostReposRepoIdCronCron_Call struct {
	*mock.Call
}

// PostReposRepoIdCronCron is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - cron string
//   - params *client.PostReposRepoIdCronCronParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdCronCron(ctx interface{}, repoId interface{}, cron interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdCronCron_Call {
	return &MockClientInterface_PostReposRepoIdCronCron_Call{Call: _e.mock.On("PostReposRepoIdCronCron",
		append([]interface{}{ctx, repoId, cron, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdCronCron_Call) Run(run func(ctx context.Context, repoId int, cron string, params *client.PostReposRepoIdCronCronParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdCronCron_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(*client.PostReposRepoIdCronCronParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdCronCron_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdCronCron_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdCronCron_Call) RunAndReturn(run func(context.Context, int, string, *client.PostReposRepoIdCronCronParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdCronCron_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdCronWithBody provides a mock function with given fields: ctx, repoId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostReposRepoIdCronWithBody(ctx context.Context, repoId int, params *client.PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdCronWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdCronParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdCronParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdCronParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdCronWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdCronWithBody'
type MockClientInterface_PostReposRepoIdCronWithBody_Call struct {
	*mock.Call
}

// PostReposRepoIdCronWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdCronParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdCronWithBody(ctx interface{}, repoId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdCronWithBody_Call {
	return &MockClientInterface_PostReposRepoIdCronWithBody_Call{Call: _e.mock.On("PostReposRepoIdCronWithBody",
		append([]interface{}{ctx, repoId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdCronWithBody_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdCronParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdCronWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdCronParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdCronWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdCronWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdCronWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdCronParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdCronWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdMove provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdMove(ctx context.Context, repoId int, params *client.PostReposRepoIdMoveParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdMove")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdMoveParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdMoveParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdMoveParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdMove'
type MockClientInterface_PostReposRepoIdMove_Call struct {
	*mock.Call
}

// PostReposRepoIdMove is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdMoveParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdMove(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdMove_Call {
	return &MockClientInterface_PostReposRepoIdMove_Call{Call: _e.mock.On("PostReposRepoIdMove",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdMove_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdMoveParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdMoveParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdMove_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdMove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdMove_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdMoveParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdMove_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdPipelinesNumber provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdPipelinesNumber(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdPipelinesNumber")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdPipelinesNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdPipelinesNumber'
type MockClientInterface_PostReposRepoIdPipelinesNumber_Call struct {
	*mock.Call
}

// PostReposRepoIdPipelinesNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.PostReposRepoIdPipelinesNumberParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdPipelinesNumber(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdPipelinesNumber_Call {
	return &MockClientInterface_PostReposRepoIdPipelinesNumber_Call{Call: _e.mock.On("PostReposRepoIdPipelinesNumber",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumber_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdPipelinesNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.PostReposRepoIdPipelinesNumberParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumber_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumber_Call) RunAndReturn(run func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdPipelinesNumber_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdPipelinesNumberApprove provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdPipelinesNumberApprove(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdPipelinesNumberApprove")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberApproveParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberApproveParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberApproveParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdPipelinesNumberApprove'
type MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call struct {
	*mock.Call
}

// PostReposRepoIdPipelinesNumberApprove is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.PostReposRepoIdPipelinesNumberApproveParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdPipelinesNumberApprove(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call {
	return &MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call{Call: _e.mock.On("PostReposRepoIdPipelinesNumberApprove",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberApproveParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.PostReposRepoIdPipelinesNumberApproveParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call) RunAndReturn(run func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberApproveParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdPipelinesNumberApprove_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdPipelinesNumberCancel provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdPipelinesNumberCancel(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdPipelinesNumberCancel")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberCancelParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberCancelParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberCancelParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdPipelinesNumberCancel'
type MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call struct {
	*mock.Call
}

// PostReposRepoIdPipelinesNumberCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.PostReposRepoIdPipelinesNumberCancelParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdPipelinesNumberCancel(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call {
	return &MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call{Call: _e.mock.On("PostReposRepoIdPipelinesNumberCancel",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberCancelParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.PostReposRepoIdPipelinesNumberCancelParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call) RunAndReturn(run func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberCancelParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdPipelinesNumberCancel_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdPipelinesNumberDecline provides a mock function with given fields: ctx, repoId, number, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdPipelinesNumberDecline(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, number, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdPipelinesNumberDecline")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberDeclineParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, number, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberDeclineParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberDeclineParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, number, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdPipelinesNumberDecline'
type MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call struct {
	*mock.Call
}

// PostReposRepoIdPipelinesNumberDecline is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - number int
//   - params *client.PostReposRepoIdPipelinesNumberDeclineParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdPipelinesNumberDecline(ctx interface{}, repoId interface{}, number interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call {
	return &MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call{Call: _e.mock.On("PostReposRepoIdPipelinesNumberDecline",
		append([]interface{}{ctx, repoId, number, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call) Run(run func(ctx context.Context, repoId int, number int, params *client.PostReposRepoIdPipelinesNumberDeclineParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*client.PostReposRepoIdPipelinesNumberDeclineParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call) RunAndReturn(run func(context.Context, int, int, *client.PostReposRepoIdPipelinesNumberDeclineParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdPipelinesNumberDecline_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdPipelinesWithBody provides a mock function with given fields: ctx, repoId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostReposRepoIdPipelinesWithBody(ctx context.Context, repoId int, params *client.PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdPipelinesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdPipelinesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdPipelinesParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdPipelinesParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdPipelinesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdPipelinesWithBody'
type MockClientInterface_PostReposRepoIdPipelinesWithBody_Call struct {
	*mock.Call
}

// PostReposRepoIdPipelinesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdPipelinesParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdPipelinesWithBody(ctx interface{}, repoId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call {
	return &MockClientInterface_PostReposRepoIdPipelinesWithBody_Call{Call: _e.mock.On("PostReposRepoIdPipelinesWithBody",
		append([]interface{}{ctx, repoId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdPipelinesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdPipelinesParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdPipelinesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdPipelinesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdRegistriesWithBody provides a mock function with given fields: ctx, repoId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostReposRepoIdRegistriesWithBody(ctx context.Context, repoId int, params *client.PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdRegistriesWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdRegistriesWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdRegistriesWithBody'
type MockClientInterface_PostReposRepoIdRegistriesWithBody_Call struct {
	*mock.Call
}

// PostReposRepoIdRegistriesWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdRegistriesParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdRegistriesWithBody(ctx interface{}, repoId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call {
	return &MockClientInterface_PostReposRepoIdRegistriesWithBody_Call{Call: _e.mock.On("PostReposRepoIdRegistriesWithBody",
		append([]interface{}{ctx, repoId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdRegistriesParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdRegistriesParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdRegistriesParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdRegistriesWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdRepair provides a mock function with given fields: ctx, repoId, params, reqEditors
func (_m *MockClientInterface) PostReposRepoIdRepair(ctx context.Context, repoId int, params *client.PostReposRepoIdRepairParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdRepair")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdRepairParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdRepairParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdRepairParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdRepair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdRepair'
type MockClientInterface_PostReposRepoIdRepair_Call struct {
	*mock.Call
}

// PostReposRepoIdRepair is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdRepairParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdRepair(ctx interface{}, repoId interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdRepair_Call {
	return &MockClientInterface_PostReposRepoIdRepair_Call{Call: _e.mock.On("PostReposRepoIdRepair",
		append([]interface{}{ctx, repoId, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdRepair_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdRepairParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdRepair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdRepairParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdRepair_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdRepair_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdRepair_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdRepairParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdRepair_Call {
	_c.Call.Return(run)
	return _c
}

// PostReposRepoIdSecretsWithBody provides a mock function with given fields: ctx, repoId, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostReposRepoIdSecretsWithBody(ctx context.Context, repoId int, params *client.PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, repoId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReposRepoIdSecretsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, repoId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *client.PostReposRepoIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *client.PostReposRepoIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, repoId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostReposRepoIdSecretsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReposRepoIdSecretsWithBody'
type MockClientInterface_PostReposRepoIdSecretsWithBody_Call struct {
	*mock.Call
}

// PostReposRepoIdSecretsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - repoId int
//   - params *client.PostReposRepoIdSecretsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostReposRepoIdSecretsWithBody(ctx interface{}, repoId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostReposRepoIdSecretsWithBody_Call {
	return &MockClientInterface_PostReposRepoIdSecretsWithBody_Call{Call: _e.mock.On("PostReposRepoIdSecretsWithBody",
		append([]interface{}{ctx, repoId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostReposRepoIdSecretsWithBody_Call) Run(run func(ctx context.Context, repoId int, params *client.PostReposRepoIdSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostReposRepoIdSecretsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(*client.PostReposRepoIdSecretsParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdSecretsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostReposRepoIdSecretsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostReposRepoIdSecretsWithBody_Call) RunAndReturn(run func(context.Context, int, *client.PostReposRepoIdSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostReposRepoIdSecretsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostSecretsWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostSecretsWithBody(ctx context.Context, params *client.PostSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostSecretsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostSecretsParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostSecretsParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostSecretsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostSecretsWithBody'
type MockClientInterface_PostSecretsWithBody_Call struct {
	*mock.Call
}

// PostSecretsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostSecretsParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostSecretsWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostSecretsWithBody_Call {
	return &MockClientInterface_PostSecretsWithBody_Call{Call: _e.mock.On("PostSecretsWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostSecretsWithBody_Call) Run(run func(ctx context.Context, params *client.PostSecretsParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostSecretsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostSecretsParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostSecretsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostSecretsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostSecretsWithBody_Call) RunAndReturn(run func(context.Context, *client.PostSecretsParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostSecretsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PostUserToken provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) PostUserToken(ctx context.Context, params *client.PostUserTokenParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostUserTokenParams, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostUserTokenParams, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostUserTokenParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostUserToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUserToken'
type MockClientInterface_PostUserToken_Call struct {
	*mock.Call
}

// PostUserToken is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostUserTokenParams
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostUserToken(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_PostUserToken_Call {
	return &MockClientInterface_PostUserToken_Call{Call: _e.mock.On("PostUserToken",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostUserToken_Call) Run(run func(ctx context.Context, params *client.PostUserTokenParams, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostUserToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostUserTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostUserToken_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostUserToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostUserToken_Call) RunAndReturn(run func(context.Context, *client.PostUserTokenParams, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostUserToken_Call {
	_c.Call.Return(run)
	return _c
}

// PostUsersWithBody provides a mock function with given fields: ctx, params, contentType, body, reqEditors
func (_m *MockClientInterface) PostUsersWithBody(ctx context.Context, params *client.PostUsersParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUsersWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostUsersParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *client.PostUsersParams, string, io.Reader, ...client.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *client.PostUsersParams, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostUsersWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUsersWithBody'
type MockClientInterface_PostUsersWithBody_Call struct {
	*mock.Call
}

// PostUsersWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - params *client.PostUsersParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...client.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostUsersWithBody(ctx interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostUsersWithBody_Call {
	return &MockClientInterface_PostUsersWithBody_Call{Call: _e.mock.On("PostUsersWithBody",
		append([]interface{}{ctx, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostUsersWithBody_Call) Run(run func(ctx context.Context, params *client.PostUsersParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn)) *MockClientInterface_PostUsersWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(client.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*client.PostUsersParams), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostUsersWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostUsersWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostUsersWithBody_Call) RunAndReturn(run func(context.Context, *client.PostUsersParams, string, io.Reader, ...client.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostUsersWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
